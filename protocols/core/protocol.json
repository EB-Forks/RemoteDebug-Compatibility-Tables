{
  "version": {
    "major": 1,
    "minor": 0
  },
  "domains": [
    {
      "domain": "Page",
      "commands": [
        {
          "name": "enable",
          "description": "Enables page domain notifications."
        },
        {
          "name": "disable",
          "description": "Disables page domain notifications."
        },
        {
          "name": "addScriptToEvaluateOnLoad",
          "parameters": [
            {
              "name": "scriptSource",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "identifier",
              "$ref": "ScriptIdentifier",
              "description": "Identifier of the added script."
            }
          ]
        },
        {
          "name": "removeScriptToEvaluateOnLoad",
          "parameters": [
            {
              "name": "identifier",
              "$ref": "ScriptIdentifier"
            }
          ]
        },
        {
          "name": "reload",
          "parameters": [
            {
              "name": "ignoreCache",
              "type": "boolean",
              "optional": true,
              "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh)."
            },
            {
              "name": "scriptToEvaluateOnLoad",
              "type": "string",
              "optional": true,
              "description": "If set, the script will be injected into all frames of the inspected page after reload."
            }
          ],
          "description": "Reloads given page optionally ignoring the cache."
        },
        {
          "name": "navigate",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to navigate the page to."
            }
          ],
          "description": "Navigates current page to the given URL."
        },
        {
          "name": "getCookies",
          "returns": [
            {
              "name": "cookies",
              "type": "array",
              "items": {
                "$ref": "Cookie"
              },
              "description": "Array of cookie objects."
            }
          ],
          "description": "Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field."
        },
        {
          "name": "deleteCookie",
          "parameters": [
            {
              "name": "cookieName",
              "type": "string",
              "description": "Name of the cookie to remove."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL to match cooke domain and path."
            }
          ],
          "description": "Deletes browser cookie with given name, domain and path."
        },
        {
          "name": "getResourceTree",
          "description": "Returns present frame / resource tree structure.",
          "returns": [
            {
              "name": "frameTree",
              "$ref": "FrameResourceTree",
              "description": "Present frame / resource tree structure."
            }
          ]
        },
        {
          "name": "getResourceContent",
          "description": "Returns content of the given resource.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Frame id to get resource for."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL of the resource to get content for."
            }
          ],
          "returns": [
            {
              "name": "content",
              "type": "string",
              "description": "Resource content."
            },
            {
              "name": "base64Encoded",
              "type": "boolean",
              "description": "True, if content was served as base64."
            }
          ]
        },
        {
          "name": "searchInResource",
          "description": "Searches for given string in resource content.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Frame id for resource to search in."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL of the resource to search in."
            },
            {
              "name": "query",
              "type": "string",
              "description": "String to search for."
            },
            {
              "name": "caseSensitive",
              "type": "boolean",
              "optional": true,
              "description": "If true, search is case sensitive."
            },
            {
              "name": "isRegex",
              "type": "boolean",
              "optional": true,
              "description": "If true, treats string parameter as regex."
            },
            {
              "name": "requestId",
              "$ref": "Network.RequestId",
              "optional": true,
              "description": "Request id for resource to search in."
            }
          ],
          "returns": [
            {
              "name": "result",
              "type": "array",
              "items": {
                "$ref": "GenericTypes.SearchMatch"
              },
              "description": "List of search matches."
            }
          ]
        },
        {
          "name": "setDocumentContent",
          "description": "Sets given markup as the document's HTML.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Frame id to set HTML for."
            },
            {
              "name": "html",
              "type": "string",
              "description": "HTML content to set."
            }
          ]
        },
        {
          "name": "setTouchEmulationEnabled",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "description": "Whether the touch event emulation should be enabled."
            }
          ],
          "description": "Toggles mouse event-based touch event emulation."
        },
        {
          "name": "handleJavaScriptDialog",
          "description": "Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).",
          "parameters": [
            {
              "name": "accept",
              "type": "boolean",
              "description": "Whether to accept or dismiss the dialog."
            },
            {
              "name": "promptText",
              "type": "string",
              "optional": true,
              "description": "The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog."
            }
          ]
        }
      ],
      "events": [
        {
          "name": "domContentEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        },
        {
          "name": "loadEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        },
        {
          "name": "frameNavigated",
          "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
          "parameters": [
            {
              "name": "frame",
              "$ref": "Frame",
              "description": "Frame object."
            }
          ]
        },
        {
          "name": "frameDetached",
          "description": "Fired when frame has been detached from its parent.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has been detached."
            }
          ]
        },
        {
          "name": "frameStartedLoading",
          "description": "Fired when frame has started loading.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has started loading."
            }
          ]
        },
        {
          "name": "frameStoppedLoading",
          "description": "Fired when frame has stopped loading.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has stopped loading."
            }
          ]
        },
        {
          "name": "frameScheduledNavigation",
          "description": "Fired when frame schedules a potential navigation.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has scheduled a navigation."
            },
            {
              "name": "delay",
              "type": "number",
              "description": "Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start."
            }
          ]
        },
        {
          "name": "frameClearedScheduledNavigation",
          "description": "Fired when frame no longer has a scheduled navigation.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has cleared its scheduled navigation."
            }
          ]
        },
        {
          "name": "javascriptDialogOpening",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.",
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "description": "Message that will be displayed by the dialog."
            }
          ]
        },
        {
          "name": "javascriptDialogClosed",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed."
        }
      ],
      "types": [
        {
          "id": "ResourceType",
          "type": "string",
          "enum": [
            "Document",
            "Stylesheet",
            "Image",
            "Font",
            "Script",
            "XHR",
            "WebSocket",
            "Other"
          ],
          "description": "Resource type as it was perceived by the rendering engine."
        },
        {
          "id": "Frame",
          "type": "object",
          "description": "Information about the Frame on the page.",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "description": "Frame unique identifier."
            },
            {
              "name": "parentId",
              "type": "string",
              "optional": true,
              "description": "Parent frame identifier."
            },
            {
              "name": "loaderId",
              "$ref": "Network.LoaderId",
              "description": "Identifier of the loader associated with this frame."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "Frame's name as specified in the tag."
            },
            {
              "name": "url",
              "type": "string",
              "description": "Frame document's URL."
            },
            {
              "name": "securityOrigin",
              "type": "string",
              "description": "Frame document's security origin."
            },
            {
              "name": "mimeType",
              "type": "string",
              "description": "Frame document's mimeType as determined by the browser."
            }
          ]
        },
        {
          "id": "FrameResource",
          "type": "object",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL."
            },
            {
              "name": "type",
              "$ref": "ResourceType",
              "description": "Type of this resource."
            },
            {
              "name": "mimeType",
              "type": "string",
              "description": "Resource mimeType as determined by the browser."
            },
            {
              "name": "failed",
              "type": "boolean",
              "optional": true,
              "description": "True if the resource failed to load."
            },
            {
              "name": "canceled",
              "type": "boolean",
              "optional": true,
              "description": "True if the resource was canceled during loading."
            },
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with this resource (if any)."
            }
          ]
        },
        {
          "id": "FrameResourceTree",
          "type": "object",
          "description": "Information about the Frame hierarchy along with their cached resources.",
          "properties": [
            {
              "name": "frame",
              "$ref": "Frame",
              "description": "Frame information for this tree item."
            },
            {
              "name": "childFrames",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "FrameResourceTree"
              },
              "description": "Child frames."
            },
            {
              "name": "resources",
              "type": "array",
              "items": {
                "$ref": "FrameResource"
              },
              "description": "Information about frame resources."
            }
          ]
        },
        {
          "id": "ScriptIdentifier",
          "type": "string",
          "description": "Unique script identifier."
        }
      ]
    },
    {
      "domain": "Network",
      "commands": [
        {
          "name": "enable",
          "description": "Enables network tracking, network events will now be delivered to the client."
        },
        {
          "name": "disable",
          "description": "Disables network tracking, prevents network events from being sent to the client."
        },
        {
          "name": "setExtraHTTPHeaders",
          "description": "Specifies whether to always send extra HTTP headers with the requests from this page.",
          "parameters": [
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "Map with extra HTTP headers."
            }
          ]
        },
        {
          "name": "getResponseBody",
          "description": "Returns content served for the given request.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Identifier of the network request to get content for."
            }
          ],
          "returns": [
            {
              "name": "body",
              "type": "string",
              "description": "Response body."
            },
            {
              "name": "base64Encoded",
              "type": "boolean",
              "description": "True, if content was sent as base64."
            }
          ]
        },
        {
          "name": "setCacheDisabled",
          "parameters": [
            {
              "name": "cacheDisabled",
              "type": "boolean",
              "description": "Cache disabled state."
            }
          ],
          "description": "Toggles ignoring cache for each request. If <code>true</code>, cache will not be used."
        }
      ],
      "events": [
        {
          "name": "requestWillBeSent",
          "description": "Fired when page is about to send HTTP request.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Frame identifier."
            },
            {
              "name": "loaderId",
              "$ref": "LoaderId",
              "description": "Loader identifier."
            },
            {
              "name": "documentURL",
              "type": "string",
              "description": "URL of the document this request is loaded for."
            },
            {
              "name": "request",
              "$ref": "Request",
              "description": "Request data."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "initiator",
              "$ref": "Initiator",
              "description": "Request initiator."
            },
            {
              "name": "redirectResponse",
              "optional": true,
              "$ref": "Response",
              "description": "Redirect response data."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "optional": true,
              "description": "Resource type."
            }
          ]
        },
        {
          "name": "requestServedFromCache",
          "description": "Fired if request ended up loading from cache.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            }
          ]
        },
        {
          "name": "responseReceived",
          "description": "Fired when HTTP response is available.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Frame identifier."
            },
            {
              "name": "loaderId",
              "$ref": "LoaderId",
              "description": "Loader identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "description": "Resource type."
            },
            {
              "name": "response",
              "$ref": "Response",
              "description": "Response data."
            }
          ]
        },
        {
          "name": "dataReceived",
          "description": "Fired when data chunk was received over the network.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "dataLength",
              "type": "integer",
              "description": "Data chunk length."
            },
            {
              "name": "encodedDataLength",
              "type": "integer",
              "description": "Actual bytes received (might be less than dataLength for compressed encodings)."
            }
          ]
        },
        {
          "name": "loadingFinished",
          "description": "Fired when HTTP request has finished loading.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with this resource (if any)."
            }
          ]
        },
        {
          "name": "loadingFailed",
          "description": "Fired when HTTP request has failed to load.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "errorText",
              "type": "string",
              "description": "User friendly error message."
            },
            {
              "name": "canceled",
              "type": "boolean",
              "optional": true,
              "description": "True if loading was canceled."
            }
          ]
        },
        {
          "name": "webSocketWillSendHandshakeRequest",
          "description": "Fired when WebSocket is about to initiate handshake.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "request",
              "$ref": "WebSocketRequest",
              "description": "WebSocket request data."
            }
          ]
        },
        {
          "name": "webSocketHandshakeResponseReceived",
          "description": "Fired when WebSocket handshake response becomes available.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketResponse",
              "description": "WebSocket response data."
            }
          ]
        },
        {
          "name": "webSocketCreated",
          "description": "Fired upon WebSocket creation.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "url",
              "type": "string",
              "description": "WebSocket request URL."
            }
          ]
        },
        {
          "name": "webSocketClosed",
          "description": "Fired when WebSocket is closed.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            }
          ]
        },
        {
          "name": "webSocketFrameReceived",
          "description": "Fired when WebSocket frame is received.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketFrame",
              "description": "WebSocket response data."
            }
          ]
        },
        {
          "name": "webSocketFrameError",
          "description": "Fired when WebSocket frame error occurs.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "WebSocket frame error message."
            }
          ]
        },
        {
          "name": "webSocketFrameSent",
          "description": "Fired when WebSocket frame is sent.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketFrame",
              "description": "WebSocket response data."
            }
          ]
        }
      ],
      "types": [
        {
          "id": "LoaderId",
          "type": "string",
          "description": "Unique loader identifier."
        },
        {
          "id": "RequestId",
          "type": "string",
          "description": "Unique request identifier."
        },
        {
          "id": "Timestamp",
          "type": "number",
          "description": "Number of seconds since epoch."
        },
        {
          "id": "Headers",
          "type": "object",
          "description": "Request / response headers as keys / values of JSON object."
        },
        {
          "id": "ResourceTiming",
          "type": "object",
          "description": "Timing information for the request.",
          "properties": [
            {
              "name": "navigationStart",
              "type": "number",
              "description": "Timing's navigationStart is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this navigationStart."
            },
            {
              "name": "domainLookupStart",
              "type": "number",
              "description": "Started DNS address resolve."
            },
            {
              "name": "domainLookupEnd",
              "type": "number",
              "description": "Finished DNS address resolve."
            },
            {
              "name": "connectStart",
              "type": "number",
              "description": "Started connecting to the remote host."
            },
            {
              "name": "connectEnd",
              "type": "number",
              "description": "Connected to the remote host."
            },
            {
              "name": "secureConnectionStart",
              "type": "number",
              "description": "Started SSL handshake."
            },
            {
              "name": "requestStart",
              "type": "number",
              "description": "Started sending request."
            },
            {
              "name": "responseStart",
              "type": "number",
              "description": "Started receiving response headers."
            }
          ]
        },
        {
          "id": "Request",
          "type": "object",
          "description": "HTTP request data.",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "description": "Request URL."
            },
            {
              "name": "method",
              "type": "string",
              "description": "HTTP request method."
            },
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "HTTP request headers."
            },
            {
              "name": "postData",
              "type": "string",
              "optional": true,
              "description": "HTTP POST request data."
            }
          ]
        },
        {
          "id": "Response",
          "type": "object",
          "description": "HTTP response data.",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "description": "Response URL. This URL can be different from CachedResource.url in case of redirect."
            },
            {
              "name": "status",
              "type": "number",
              "description": "HTTP response status code."
            },
            {
              "name": "statusText",
              "type": "string",
              "description": "HTTP response status text."
            },
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "HTTP response headers."
            },
            {
              "name": "headersText",
              "type": "string",
              "optional": true,
              "description": "HTTP response headers text."
            },
            {
              "name": "mimeType",
              "type": "string",
              "description": "Resource mimeType as determined by the browser."
            },
            {
              "name": "requestHeaders",
              "$ref": "Headers",
              "optional": true,
              "description": "Refined HTTP request headers that were actually transmitted over the network."
            },
            {
              "name": "requestHeadersText",
              "type": "string",
              "optional": true,
              "description": "HTTP request headers text."
            },
            {
              "name": "fromDiskCache",
              "type": "boolean",
              "optional": true,
              "description": "Specifies that the request was served from the disk cache."
            },
            {
              "name": "timing",
              "$ref": "ResourceTiming",
              "optional": true,
              "description": "Timing information for the given request."
            }
          ]
        },
        {
          "id": "WebSocketRequest",
          "type": "object",
          "description": "WebSocket request data.",
          "properties": [
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "HTTP response headers."
            }
          ]
        },
        {
          "id": "WebSocketResponse",
          "type": "object",
          "description": "WebSocket response data.",
          "properties": [
            {
              "name": "status",
              "type": "number",
              "description": "HTTP response status code."
            },
            {
              "name": "statusText",
              "type": "string",
              "description": "HTTP response status text."
            },
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "HTTP response headers."
            }
          ]
        },
        {
          "id": "WebSocketFrame",
          "type": "object",
          "description": "WebSocket frame data.",
          "properties": [
            {
              "name": "opcode",
              "type": "number",
              "description": "WebSocket frame opcode."
            },
            {
              "name": "mask",
              "type": "boolean",
              "description": "WebSocket frame mask."
            },
            {
              "name": "payloadData",
              "type": "string",
              "description": "WebSocket frame payload data."
            }
          ]
        },
        {
          "id": "CachedResource",
          "type": "object",
          "description": "Information about the cached resource.",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL. This is the url of the original network request."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "description": "Type of this resource."
            },
            {
              "name": "response",
              "$ref": "Response",
              "optional": true,
              "description": "Cached response data."
            },
            {
              "name": "bodySize",
              "type": "number",
              "description": "Cached response body size."
            },
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with this resource (if any)."
            }
          ]
        },
        {
          "id": "Initiator",
          "type": "object",
          "description": "Information about the request initiator.",
          "properties": [
            {
              "name": "type",
              "type": "string",
              "enum": [
                "parser",
                "script",
                "other"
              ],
              "description": "Type of this initiator."
            },
            {
              "name": "stackTrace",
              "$ref": "Console.StackTrace",
              "optional": true,
              "description": "Initiator JavaScript stack trace, set for Script only."
            },
            {
              "name": "url",
              "type": "string",
              "optional": true,
              "description": "Initiator URL, set for Parser type only."
            },
            {
              "name": "lineNumber",
              "type": "number",
              "optional": true,
              "description": "Initiator line number, set for Parser type only."
            }
          ]
        }
      ]
    },
    {
      "domain": "DOM",
      "commands": [
        {
          "name": "getDocument",
          "returns": [
            {
              "name": "root",
              "$ref": "Node",
              "description": "Resulting node."
            }
          ],
          "description": "Returns the root DOM node to the caller."
        },
        {
          "name": "requestChildNodes",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get children for."
            },
            {
              "name": "depth",
              "type": "integer",
              "optional": true,
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0."
            }
          ],
          "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth."
        },
        {
          "name": "querySelector",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to query upon."
            },
            {
              "name": "selector",
              "type": "string",
              "description": "Selector string."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Query selector result."
            }
          ],
          "description": "Executes <code>querySelector</code> on a given node."
        },
        {
          "name": "querySelectorAll",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to query upon."
            },
            {
              "name": "selector",
              "type": "string",
              "description": "Selector string."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Query selector result."
            }
          ],
          "description": "Executes <code>querySelectorAll</code> on a given node."
        },
        {
          "name": "setNodeName",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set name for."
            },
            {
              "name": "name",
              "type": "string",
              "description": "New node's name."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "New node's id."
            }
          ],
          "description": "Sets node name for a node with given id."
        },
        {
          "name": "setNodeValue",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set value for."
            },
            {
              "name": "value",
              "type": "string",
              "description": "New node's value."
            }
          ],
          "description": "Sets node value for a node with given id."
        },
        {
          "name": "removeNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to remove."
            }
          ],
          "description": "Removes node with given id."
        },
        {
          "name": "setAttributeValue",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to set attribute for."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Sets attribute for an element with given id."
        },
        {
          "name": "setAttributesAsText",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to set attributes for."
            },
            {
              "name": "text",
              "type": "string",
              "description": "Text with a number of attributes. Will parse this text using HTML parser."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully."
            }
          ],
          "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs."
        },
        {
          "name": "removeAttribute",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to remove attribute from."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Name of the attribute to remove."
            }
          ],
          "description": "Removes attribute with given name from an element with given id."
        },
        {
          "name": "getOuterHTML",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get markup for."
            }
          ],
          "returns": [
            {
              "name": "outerHTML",
              "type": "string",
              "description": "Outer HTML markup."
            }
          ],
          "description": "Returns node's HTML markup."
        },
        {
          "name": "setOuterHTML",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set markup for."
            },
            {
              "name": "outerHTML",
              "type": "string",
              "description": "Outer HTML markup to set."
            }
          ],
          "description": "Sets node HTML markup, returns new node id."
        },
        {
          "name": "performSearch",
          "parameters": [
            {
              "name": "query",
              "type": "string",
              "description": "Plain text or query selector or XPath search query."
            },
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "optional": true,
              "description": "Ids of nodes to use as starting points for the search."
            }
          ],
          "returns": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            },
            {
              "name": "resultCount",
              "type": "integer",
              "description": "Number of search results."
            }
          ],
          "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session."
        },
        {
          "name": "getSearchResults",
          "parameters": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            },
            {
              "name": "fromIndex",
              "type": "integer",
              "description": "Start index of the search result to be returned."
            },
            {
              "name": "toIndex",
              "type": "integer",
              "description": "End index of the search result to be returned."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the search result nodes."
            }
          ],
          "description": "Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier."
        },
        {
          "name": "discardSearchResults",
          "parameters": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            }
          ],
          "description": "Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search."
        },
        {
          "name": "requestNode",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "Runtime.RemoteObjectId",
              "description": "JavaScript object id to convert into node."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Node id for given object."
            }
          ],
          "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications."
        },
        {
          "name": "highlightRect",
          "parameters": [
            {
              "name": "x",
              "type": "integer",
              "description": "X coordinate"
            },
            {
              "name": "y",
              "type": "integer",
              "description": "Y coordinate"
            },
            {
              "name": "width",
              "type": "integer",
              "description": "Rectangle width"
            },
            {
              "name": "height",
              "type": "integer",
              "description": "Rectangle height"
            },
            {
              "name": "color",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The highlight fill color (default: transparent)."
            },
            {
              "name": "outlineColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The highlight outline color (default: transparent)."
            },
            {
              "name": "usePageCoordinates",
              "type": "boolean",
              "optional": true,
              "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)."
            }
          ],
          "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport."
        },
        {
          "name": "highlightQuad",
          "parameters": [
            {
              "name": "quad",
              "$ref": "Quad",
              "description": "Quad to highlight"
            },
            {
              "name": "color",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The highlight fill color (default: transparent)."
            },
            {
              "name": "outlineColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The highlight outline color (default: transparent)."
            },
            {
              "name": "usePageCoordinates",
              "type": "boolean",
              "optional": true,
              "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)."
            }
          ],
          "description": "Highlights given quad. Coordinates are absolute with respect to the main frame viewport."
        },
        {
          "name": "highlightNode",
          "parameters": [
            {
              "name": "highlightConfig",
              "$ref": "HighlightConfig",
              "description": "A descriptor for the highlight appearance."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Identifier of the node to highlight."
            },
            {
              "name": "objectId",
              "$ref": "Runtime.RemoteObjectId",
              "optional": true,
              "description": "JavaScript object id of the node to be highlighted."
            }
          ],
          "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
        },
        {
          "name": "hideHighlight",
          "description": "Hides DOM node highlight."
        },
        {
          "name": "highlightFrame",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Identifier of the frame to highlight."
            },
            {
              "name": "contentColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The content box highlight fill color (default: transparent)."
            },
            {
              "name": "contentOutlineColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The content box highlight outline color (default: transparent)."
            }
          ],
          "description": "Highlights owner element of the frame with given id."
        },
        {
          "name": "pushNodeByPathToFrontend",
          "parameters": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to node in the proprietary format."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node for given path."
            }
          ],
          "description": "Requests that the node is sent to the caller given its path. // FIXME, use XPath"
        },
        {
          "name": "resolveNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to resolve."
            },
            {
              "name": "objectGroup",
              "type": "string",
              "optional": true,
              "description": "Symbolic group name that can be used to release multiple objects."
            }
          ],
          "returns": [
            {
              "name": "object",
              "$ref": "Runtime.RemoteObject",
              "description": "JavaScript object wrapper for given node."
            }
          ],
          "description": "Resolves JavaScript node object for given node id."
        },
        {
          "name": "getAttributes",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to retrieve attibutes for."
            }
          ],
          "returns": [
            {
              "name": "attributes",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An interleaved array of node attribute names and values."
            }
          ],
          "description": "Returns attributes for the specified node."
        },
        {
          "name": "moveTo",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to drop."
            },
            {
              "name": "targetNodeId",
              "$ref": "NodeId",
              "description": "Id of the element to drop into."
            },
            {
              "name": "insertBeforeNodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Drop node before given one."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "New id of the moved node."
            }
          ],
          "description": "Moves node into the new container, places it before the given anchor."
        },
        {
          "name": "undo",
          "description": "Undoes the last performed action."
        },
        {
          "name": "redo",
          "description": "Re-does the last undone action."
        },
        {
          "name": "markUndoableState",
          "description": "Marks last undoable state."
        },
        {
          "name": "focus",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to focus."
            }
          ],
          "description": "Focuses the given element."
        }
      ],
      "events": [
        {
          "name": "documentUpdated",
          "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
        },
        {
          "name": "setChildNodes",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Parent node id to populate with children."
            },
            {
              "name": "nodes",
              "type": "array",
              "items": {
                "$ref": "Node"
              },
              "description": "Child nodes array."
            }
          ],
          "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
        },
        {
          "name": "attributeModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Fired when <code>Element</code>'s attribute is modified."
        },
        {
          "name": "attributeRemoved",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "A ttribute name."
            }
          ],
          "description": "Fired when <code>Element</code>'s attribute is removed."
        },
        {
          "name": "inlineStyleInvalidated",
          "parameters": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the nodes for which the inline styles have been invalidated."
            }
          ],
          "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification."
        },
        {
          "name": "characterDataModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "characterData",
              "type": "string",
              "description": "New text value."
            }
          ],
          "description": "Mirrors <code>DOMCharacterDataModified</code> event."
        },
        {
          "name": "childNodeCountUpdated",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "childNodeCount",
              "type": "integer",
              "description": "New node count."
            }
          ],
          "description": "Fired when <code>Container</code>'s child node count has changed."
        },
        {
          "name": "childNodeInserted",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "previousNodeId",
              "$ref": "NodeId",
              "description": "If of the previous siblint."
            },
            {
              "name": "node",
              "$ref": "Node",
              "description": "Inserted node data."
            }
          ],
          "description": "Mirrors <code>DOMNodeInserted</code> event."
        },
        {
          "name": "childNodeRemoved",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Parent id."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has been removed."
            }
          ],
          "description": "Mirrors <code>DOMNodeRemoved</code> event."
        },
        {
          "name": "shadowRootPushed",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "root",
              "$ref": "Node",
              "description": "Shadow root."
            }
          ],
          "description": "Called when shadow root is pushed into the element."
        },
        {
          "name": "shadowRootPopped",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "rootId",
              "$ref": "NodeId",
              "description": "Shadow root id."
            }
          ],
          "description": "Called when shadow root is popped from the element."
        },
        {
          "name": "pseudoElementAdded",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Pseudo element's parent element id."
            },
            {
              "name": "pseudoElement",
              "$ref": "Node",
              "description": "The added pseudo element."
            }
          ],
          "description": "Called when a pseudo element is added to an element."
        },
        {
          "name": "pseudoElementRemoved",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Pseudo element's parent element id."
            },
            {
              "name": "pseudoElementId",
              "$ref": "NodeId",
              "description": "The removed pseudo element id."
            }
          ],
          "description": "Called when a pseudo element is removed from an element."
        }
      ],
      "types": [
        {
          "id": "NodeId",
          "type": "integer",
          "description": "Unique DOM node identifier."
        },
        {
          "id": "BackendNodeId",
          "type": "integer",
          "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the front-end."
        },
        {
          "id": "PseudoType",
          "type": "string",
          "enum": [
            "before",
            "after"
          ],
          "description": "Pseudo element type."
        },
        {
          "id": "ShadowRootType",
          "type": "string",
          "enum": [
            "user-agent",
            "open",
            "closed"
          ],
          "description": "Shadow root type."
        },
        {
          "id": "Node",
          "type": "object",
          "properties": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client."
            },
            {
              "name": "nodeType",
              "type": "integer",
              "description": "<code>Node</code>'s nodeType."
            },
            {
              "name": "nodeName",
              "type": "string",
              "description": "<code>Node</code>'s nodeName."
            },
            {
              "name": "localName",
              "type": "string",
              "description": "<code>Node</code>'s localName."
            },
            {
              "name": "nodeValue",
              "type": "string",
              "description": "<code>Node</code>'s nodeValue."
            },
            {
              "name": "childNodeCount",
              "type": "integer",
              "optional": true,
              "description": "Child count for <code>Container</code> nodes."
            },
            {
              "name": "children",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "Node"
              },
              "description": "Child nodes of this node when requested with children."
            },
            {
              "name": "attributes",
              "type": "array",
              "optional": true,
              "items": {
                "type": "string"
              },
              "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>."
            },
            {
              "name": "documentURL",
              "type": "string",
              "optional": true,
              "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to."
            },
            {
              "name": "baseURL",
              "type": "string",
              "optional": true,
              "description": "Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion."
            },
            {
              "name": "publicId",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType</code>'s publicId."
            },
            {
              "name": "systemId",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType</code>'s systemId."
            },
            {
              "name": "internalSubset",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType</code>'s internalSubset."
            },
            {
              "name": "xmlVersion",
              "type": "string",
              "optional": true,
              "description": "<code>Document</code>'s XML version in case of XML documents."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "<code>Attr</code>'s name."
            },
            {
              "name": "value",
              "type": "string",
              "optional": true,
              "description": "<code>Attr</code>'s value."
            },
            {
              "name": "pseudoType",
              "$ref": "PseudoType",
              "optional": true,
              "description": "Pseudo element type for this node."
            },
            {
              "name": "shadowRootType",
              "$ref": "ShadowRootType",
              "optional": true,
              "description": "Shadow root type."
            },
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "optional": true,
              "description": "Frame ID for frame owner elements."
            },
            {
              "name": "contentDocument",
              "$ref": "Node",
              "optional": true,
              "description": "Content document for frame owner elements."
            },
            {
              "name": "shadowRoots",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "Node"
              },
              "description": "Shadow root list for given element host."
            },
            {
              "name": "templateContent",
              "$ref": "Node",
              "optional": true,
              "description": "Content document fragment for template elements"
            },
            {
              "name": "pseudoElements",
              "type": "array",
              "items": {
                "$ref": "Node"
              },
              "optional": true,
              "description": "Pseudo elements associated with this node."
            },
            {
              "name": "role",
              "type": "string",
              "optional": true,
              "description": "Computed value for first recognized role token, default role per element, or overridden role."
            },
            {
              "name": "contentSecurityPolicyHash",
              "type": "string",
              "optional": true,
              "description": "Computed SHA-256 Content Security Policy hash source for given element."
            }
          ],
          "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
        },
        {
          "id": "Quad",
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 8,
          "maxItems": 8,
          "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise."
        },
        {
          "id": "HighlightConfig",
          "type": "object",
          "properties": [
            {
              "name": "showInfo",
              "type": "boolean",
              "optional": true,
              "description": "Whether the node info tooltip should be shown (default: false)."
            },
            {
              "name": "contentColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The content box highlight fill color (default: transparent)."
            },
            {
              "name": "paddingColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The padding highlight fill color (default: transparent)."
            },
            {
              "name": "borderColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The border highlight fill color (default: transparent)."
            },
            {
              "name": "marginColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The margin highlight fill color (default: transparent)."
            }
          ],
          "description": "Configuration data for the highlighting of page elements."
        }
      ]
    },
    {
      "domain": "DOMDebugger",
      "commands": [
        {
          "name": "setDOMBreakpoint",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId",
              "description": "Identifier of the node to set breakpoint on."
            },
            {
              "name": "type",
              "$ref": "DOMBreakpointType",
              "description": "Type of the operation to stop upon."
            }
          ],
          "description": "Sets breakpoint on particular operation with DOM."
        },
        {
          "name": "removeDOMBreakpoint",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId",
              "description": "Identifier of the node to remove breakpoint from."
            },
            {
              "name": "type",
              "$ref": "DOMBreakpointType",
              "description": "Type of the breakpoint to remove."
            }
          ],
          "description": "Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>."
        },
        {
          "name": "setEventListenerBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "DOM Event name to stop on (any DOM event will do)."
            }
          ],
          "description": "Sets breakpoint on particular DOM event."
        },
        {
          "name": "removeEventListenerBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Event name."
            }
          ],
          "description": "Removes breakpoint on particular DOM event."
        },
        {
          "name": "setInstrumentationBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Instrumentation name to stop on."
            }
          ],
          "description": "Sets breakpoint on particular native event."
        },
        {
          "name": "removeInstrumentationBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Instrumentation name to stop on."
            }
          ],
          "description": "Sets breakpoint on particular native event."
        },
        {
          "name": "setXHRBreakpoint",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL substring. All XHRs having this substring in the URL will get stopped upon."
            }
          ],
          "description": "Sets breakpoint on XMLHttpRequest."
        },
        {
          "name": "removeXHRBreakpoint",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL substring."
            }
          ],
          "description": "Removes breakpoint from XMLHttpRequest."
        }
      ],
      "events": [],
      "types": [
        {
          "id": "DOMBreakpointType",
          "type": "string",
          "enum": [
            "subtree-modified",
            "attribute-modified",
            "node-removed"
          ],
          "description": "DOM breakpoint type."
        }
      ]
    },
    {
      "domain": "Runtime",
      "commands": [
        {
          "name": "evaluate",
          "parameters": [
            {
              "name": "expression",
              "type": "string",
              "description": "Expression to evaluate."
            },
            {
              "name": "objectGroup",
              "type": "string",
              "optional": true,
              "description": "Symbolic group name that can be used to release multiple objects."
            },
            {
              "name": "includeCommandLineAPI",
              "type": "boolean",
              "optional": true,
              "description": "Determines whether Command Line API should be available during the evaluation."
            },
            {
              "name": "doNotPauseOnExceptionsAndMuteConsole",
              "type": "boolean",
              "optional": true,
              "description": "Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state."
            },
            {
              "name": "contextId",
              "$ref": "Runtime.ExecutionContextId",
              "optional": true,
              "description": "Specifies in which isolated context to perform evaluation. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page."
            },
            {
              "name": "returnByValue",
              "type": "boolean",
              "optional": true,
              "description": "Whether the result is expected to be a JSON object that should be sent by value."
            },
            {
              "name": "generatePreview",
              "type": "boolean",
              "optional": true,
              "description": "Whether preview should be generated for the result."
            },
            {
              "name": "saveResult",
              "type": "boolean",
              "optional": true,
              "description": "Whether the resulting value should be considered for saving in the $n history."
            }
          ],
          "returns": [
            {
              "name": "result",
              "$ref": "RemoteObject",
              "description": "Evaluation result."
            },
            {
              "name": "wasThrown",
              "type": "boolean",
              "optional": true,
              "description": "True if the result was thrown during the evaluation."
            },
            {
              "name": "savedResultIndex",
              "type": "integer",
              "optional": true,
              "description": "If the result was saved, this is the $n index that can be used to access the value."
            }
          ],
          "description": "Evaluates expression on global object."
        },
        {
          "name": "callFunctionOn",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to call function on."
            },
            {
              "name": "functionDeclaration",
              "type": "string",
              "description": "Declaration of the function to call."
            },
            {
              "name": "arguments",
              "type": "array",
              "items": {
                "$ref": "CallArgument",
                "description": "Call argument."
              },
              "optional": true,
              "description": "Call arguments. All call arguments must belong to the same JavaScript world as the target object."
            },
            {
              "name": "doNotPauseOnExceptionsAndMuteConsole",
              "type": "boolean",
              "optional": true,
              "description": "Specifies whether function call should stop on exceptions and mute console. Overrides setPauseOnException state."
            },
            {
              "name": "returnByValue",
              "type": "boolean",
              "optional": true,
              "description": "Whether the result is expected to be a JSON object which should be sent by value."
            },
            {
              "name": "generatePreview",
              "type": "boolean",
              "optional": true,
              "description": "Whether preview should be generated for the result."
            }
          ],
          "returns": [
            {
              "name": "result",
              "$ref": "RemoteObject",
              "description": "Call result."
            },
            {
              "name": "wasThrown",
              "type": "boolean",
              "optional": true,
              "description": "True if the result was thrown during the evaluation."
            }
          ],
          "description": "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."
        },
        {
          "name": "getProperties",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to return properties for."
            },
            {
              "name": "ownProperties",
              "optional": true,
              "type": "boolean",
              "description": "If true, returns properties belonging only to the object itself, not to its prototype chain."
            },
            {
              "name": "generatePreview",
              "type": "boolean",
              "optional": true,
              "description": "Whether preview should be generated for property values."
            }
          ],
          "returns": [
            {
              "name": "result",
              "type": "array",
              "items": {
                "$ref": "PropertyDescriptor"
              },
              "description": "Object properties."
            },
            {
              "name": "internalProperties",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "InternalPropertyDescriptor"
              },
              "description": "Internal object properties."
            }
          ],
          "description": "Returns properties of a given object. Object group of the result is inherited from the target object."
        },
        {
          "name": "releaseObject",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to release."
            }
          ],
          "description": "Releases remote object with given id."
        },
        {
          "name": "releaseObjectGroup",
          "parameters": [
            {
              "name": "objectGroup",
              "type": "string",
              "description": "Symbolic object group name."
            }
          ],
          "description": "Releases all remote objects that belong to a given group."
        },
        {
          "name": "enable",
          "description": "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."
        },
        {
          "name": "disable",
          "description": "Disables reporting of execution contexts creation."
        }
      ],
      "events": [
        {
          "name": "executionContextCreated",
          "parameters": [
            {
              "name": "context",
              "$ref": "ExecutionContextDescription",
              "description": "A newly created execution contex."
            }
          ],
          "description": "Issued when new execution context is created."
        }
      ],
      "types": [
        {
          "id": "RemoteObjectId",
          "type": "string",
          "description": "Unique object identifier."
        },
        {
          "id": "RemoteObject",
          "type": "object",
          "description": "Mirror object referencing original JavaScript object.",
          "properties": [
            {
              "name": "type",
              "type": "string",
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol"
              ],
              "description": "Object type."
            },
            {
              "name": "subtype",
              "type": "string",
              "optional": true,
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "error",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "class"
              ],
              "description": "Object subtype hint. Specified for <code>object</code> <code>function</code> (for class) type values only."
            },
            {
              "name": "className",
              "type": "string",
              "optional": true,
              "description": "Object class (constructor) name. Specified for <code>object</code> type values only."
            },
            {
              "name": "value",
              "type": "any",
              "optional": true,
              "description": "Remote object value (in case of primitive values or JSON values if it was requested)."
            },
            {
              "name": "description",
              "type": "string",
              "optional": true,
              "description": "String representation of the object."
            },
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "optional": true,
              "description": "Unique object identifier (for non-primitive values)."
            },
            {
              "name": "size",
              "type": "integer",
              "optional": true,
              "description": "Size of the array/collection. Specified for array/map/set/weakmap/weakset object type values only."
            },
            {
              "name": "classPrototype",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "Remote object for the class prototype. Specified for class object type values only."
            },
            {
              "name": "preview",
              "$ref": "ObjectPreview",
              "optional": true,
              "description": "Preview containing abbreviated property values. Specified for <code>object</code> type values only."
            }
          ]
        },
        {
          "id": "ObjectPreview",
          "type": "object",
          "description": "Object containing abbreviated remote object value.",
          "properties": [
            {
              "name": "type",
              "type": "string",
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol"
              ],
              "description": "Object type."
            },
            {
              "name": "subtype",
              "type": "string",
              "optional": true,
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "error",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "class"
              ],
              "description": "Object subtype hint. Specified for <code>object</code> type values only."
            },
            {
              "name": "description",
              "type": "string",
              "optional": true,
              "description": "String representation of the object."
            },
            {
              "name": "lossless",
              "type": "boolean",
              "description": "Determines whether preview is lossless (contains all information of the original object)."
            },
            {
              "name": "overflow",
              "type": "boolean",
              "optional": true,
              "description": "True iff some of the properties of the original did not fit."
            },
            {
              "name": "properties",
              "type": "array",
              "items": {
                "$ref": "PropertyPreview"
              },
              "optional": true,
              "description": "List of the properties."
            },
            {
              "name": "entries",
              "type": "array",
              "items": {
                "$ref": "EntryPreview"
              },
              "optional": true,
              "description": "List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only."
            },
            {
              "name": "size",
              "type": "integer",
              "optional": true,
              "description": "Size of the array/collection. Specified for array/map/set/weakmap/weakset object type values only."
            }
          ]
        },
        {
          "id": "PropertyPreview",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "type",
              "type": "string",
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol",
                "accessor"
              ],
              "description": "Object type."
            },
            {
              "name": "subtype",
              "type": "string",
              "optional": true,
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "error",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "class"
              ],
              "description": "Object subtype hint. Specified for <code>object</code> type values only."
            },
            {
              "name": "value",
              "type": "string",
              "optional": true,
              "description": "User-friendly property value string."
            },
            {
              "name": "valuePreview",
              "$ref": "ObjectPreview",
              "optional": true,
              "description": "Nested value preview."
            },
            {
              "name": "internal",
              "type": "boolean",
              "optional": true,
              "description": "True if this is an internal property."
            }
          ]
        },
        {
          "id": "EntryPreview",
          "type": "object",
          "properties": [
            {
              "name": "key",
              "$ref": "ObjectPreview",
              "optional": true,
              "description": "Entry key. Specified for map-like collection entries."
            },
            {
              "name": "value",
              "$ref": "ObjectPreview",
              "description": "Entry value."
            }
          ]
        },
        {
          "id": "PropertyDescriptor",
          "type": "object",
          "description": "Object property descriptor.",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "description": "Property name or symbol description."
            },
            {
              "name": "value",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "The value associated with the property."
            },
            {
              "name": "writable",
              "type": "boolean",
              "optional": true,
              "description": "True if the value associated with the property may be changed (data descriptors only)."
            },
            {
              "name": "get",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only)."
            },
            {
              "name": "set",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only)."
            },
            {
              "name": "configurable",
              "type": "boolean",
              "description": "True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object."
            },
            {
              "name": "enumerable",
              "type": "boolean",
              "description": "True if this property shows up during enumeration of the properties on the corresponding object."
            },
            {
              "name": "wasThrown",
              "type": "boolean",
              "optional": true,
              "description": "True if the result was thrown during the evaluation."
            },
            {
              "name": "isOwn",
              "optional": true,
              "type": "boolean",
              "description": "True if the property is owned for the object."
            },
            {
              "name": "symbol",
              "optional": true,
              "$ref": "Runtime.RemoteObject",
              "description": "Property symbol object, if the property is a symbol."
            },
            {
              "name": "nativeGetter",
              "optional": true,
              "type": "boolean",
              "description": "True if the property value came from a native getter."
            }
          ]
        },
        {
          "id": "InternalPropertyDescriptor",
          "type": "object",
          "description": "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "description": "Conventional property name."
            },
            {
              "name": "value",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "The value associated with the property."
            }
          ]
        },
        {
          "id": "CallArgument",
          "type": "object",
          "description": "Represents function call argument. Either remote object id <code>objectId</code> or primitive <code>value</code> or neither of (for undefined) them should be specified.",
          "properties": [
            {
              "name": "value",
              "type": "any",
              "optional": true,
              "description": "Primitive value."
            },
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "optional": true,
              "description": "Remote object handle."
            }
          ]
        },
        {
          "id": "ExecutionContextId",
          "type": "integer",
          "description": "Id of an execution context."
        },
        {
          "id": "ExecutionContextDescription",
          "type": "object",
          "description": "Description of an isolated world.",
          "properties": [
            {
              "name": "id",
              "$ref": "ExecutionContextId",
              "description": "Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed."
            },
            {
              "name": "isPageContext",
              "type": "boolean",
              "description": "True if this is a context where inpspected web page scripts run. False if it is a content script isolated context."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Human readable name describing given context."
            },
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the owning frame."
            }
          ]
        }
      ]
    },
    {
      "domain": "Debugger",
      "commands": [
        {
          "name": "enable",
          "description": "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."
        },
        {
          "name": "disable",
          "description": "Disables debugger for given page."
        },
        {
          "name": "setBreakpointsActive",
          "parameters": [
            {
              "name": "active",
              "type": "boolean",
              "description": "New value for breakpoints active state."
            }
          ],
          "description": "Activates / deactivates all breakpoints on the page."
        },
        {
          "name": "setBreakpointByUrl",
          "parameters": [
            {
              "name": "lineNumber",
              "type": "integer",
              "description": "Line number to set breakpoint at."
            },
            {
              "name": "url",
              "type": "string",
              "optional": true,
              "description": "URL of the resources to set breakpoint on."
            },
            {
              "name": "urlRegex",
              "type": "string",
              "optional": true,
              "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified."
            },
            {
              "name": "columnNumber",
              "type": "integer",
              "optional": true,
              "description": "Offset in the line to set breakpoint at."
            },
            {
              "name": "options",
              "$ref": "BreakpointOptions",
              "optional": true,
              "description": "Options to apply to this breakpoint to modify its behavior."
            }
          ],
          "returns": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId",
              "description": "Id of the created breakpoint for further reference."
            },
            {
              "name": "locations",
              "type": "array",
              "items": {
                "$ref": "Location"
              },
              "description": "List of the locations this breakpoint resolved into upon addition."
            }
          ],
          "description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."
        },
        {
          "name": "setBreakpoint",
          "parameters": [
            {
              "name": "location",
              "$ref": "Location",
              "description": "Location to set breakpoint in."
            },
            {
              "name": "options",
              "$ref": "BreakpointOptions",
              "optional": true,
              "description": "Options to apply to this breakpoint to modify its behavior."
            }
          ],
          "returns": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId",
              "description": "Id of the created breakpoint for further reference."
            },
            {
              "name": "actualLocation",
              "$ref": "Location",
              "description": "Location this breakpoint resolved into."
            }
          ],
          "description": "Sets JavaScript breakpoint at a given location."
        },
        {
          "name": "removeBreakpoint",
          "parameters": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId"
            }
          ],
          "description": "Removes JavaScript breakpoint."
        },
        {
          "name": "continueToLocation",
          "parameters": [
            {
              "name": "location",
              "$ref": "Location",
              "description": "Location to continue to."
            }
          ],
          "description": "Continues execution until specific location is reached."
        },
        {
          "name": "stepOver",
          "description": "Steps over the statement."
        },
        {
          "name": "stepInto",
          "description": "Steps into the function call."
        },
        {
          "name": "stepOut",
          "description": "Steps out of the function call."
        },
        {
          "name": "pause",
          "description": "Stops on the next JavaScript statement."
        },
        {
          "name": "resume",
          "description": "Resumes JavaScript execution."
        },
        {
          "name": "searchInContent",
          "description": "Searches for given string in script content.",
          "parameters": [
            {
              "name": "scriptId",
              "$ref": "ScriptId",
              "description": "Id of the script to search in."
            },
            {
              "name": "query",
              "type": "string",
              "description": "String to search for."
            },
            {
              "name": "caseSensitive",
              "type": "boolean",
              "optional": true,
              "description": "If true, search is case sensitive."
            },
            {
              "name": "isRegex",
              "type": "boolean",
              "optional": true,
              "description": "If true, treats string parameter as regex."
            }
          ],
          "returns": [
            {
              "name": "result",
              "type": "array",
              "items": {
                "$ref": "GenericTypes.SearchMatch"
              },
              "description": "List of search matches."
            }
          ]
        },
        {
          "name": "getScriptSource",
          "parameters": [
            {
              "name": "scriptId",
              "$ref": "ScriptId",
              "description": "Id of the script to get source for."
            }
          ],
          "returns": [
            {
              "name": "scriptSource",
              "type": "string",
              "description": "Script source."
            }
          ],
          "description": "Returns source for the script with given id."
        },
        {
          "name": "setPauseOnExceptions",
          "parameters": [
            {
              "name": "state",
              "type": "string",
              "enum": [
                "none",
                "uncaught",
                "all"
              ],
              "description": "Pause on exceptions mode."
            }
          ],
          "description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."
        },
        {
          "name": "evaluateOnCallFrame",
          "parameters": [
            {
              "name": "callFrameId",
              "$ref": "CallFrameId",
              "description": "Call frame identifier to evaluate on."
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Expression to evaluate."
            },
            {
              "name": "objectGroup",
              "type": "string",
              "optional": true,
              "description": "String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>)."
            },
            {
              "name": "includeCommandLineAPI",
              "type": "boolean",
              "optional": true,
              "description": "Specifies whether command line API should be available to the evaluated expression, defaults to false."
            },
            {
              "name": "doNotPauseOnExceptionsAndMuteConsole",
              "type": "boolean",
              "optional": true,
              "description": "Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state."
            },
            {
              "name": "returnByValue",
              "type": "boolean",
              "optional": true,
              "description": "Whether the result is expected to be a JSON object that should be sent by value."
            },
            {
              "name": "generatePreview",
              "type": "boolean",
              "optional": true,
              "description": "Whether preview should be generated for the result."
            },
            {
              "name": "saveResult",
              "type": "boolean",
              "optional": true,
              "description": "Whether the resulting value should be considered for saving in the $n history."
            }
          ],
          "returns": [
            {
              "name": "result",
              "$ref": "Runtime.RemoteObject",
              "description": "Object wrapper for the evaluation result."
            },
            {
              "name": "wasThrown",
              "type": "boolean",
              "optional": true,
              "description": "True if the result was thrown during the evaluation."
            },
            {
              "name": "savedResultIndex",
              "type": "integer",
              "optional": true,
              "description": "If the result was saved, this is the $n index that can be used to access the value."
            }
          ],
          "description": "Evaluates expression on a given call frame."
        }
      ],
      "events": [
        {
          "name": "scriptParsed",
          "parameters": [
            {
              "name": "scriptId",
              "$ref": "ScriptId",
              "description": "Identifier of the script parsed."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL of the script parsed (if any)."
            },
            {
              "name": "startLine",
              "type": "integer",
              "description": "Line offset of the script within the resource with given URL (for script tags)."
            },
            {
              "name": "startColumn",
              "type": "integer",
              "description": "Column offset of the script within the resource with given URL."
            },
            {
              "name": "endLine",
              "type": "integer",
              "description": "Last line of the script."
            },
            {
              "name": "endColumn",
              "type": "integer",
              "description": "Length of the last line of the script."
            },
            {
              "name": "isContentScript",
              "type": "boolean",
              "optional": true,
              "description": "Determines whether this script is a user extension script."
            },
            {
              "name": "sourceURL",
              "type": "string",
              "optional": true,
              "description": "sourceURL name of the script (if any)."
            },
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with script (if any)."
            }
          ],
          "description": "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."
        },
        {
          "name": "scriptFailedToParse",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "URL of the script that failed to parse."
            },
            {
              "name": "scriptSource",
              "type": "string",
              "description": "Source text of the script that failed to parse."
            },
            {
              "name": "startLine",
              "type": "integer",
              "description": "Line offset of the script within the resource."
            },
            {
              "name": "errorLine",
              "type": "integer",
              "description": "Line with error."
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "Parse error message."
            }
          ],
          "description": "Fired when virtual machine fails to parse the script."
        },
        {
          "name": "breakpointResolved",
          "parameters": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId",
              "description": "Breakpoint unique identifier."
            },
            {
              "name": "location",
              "$ref": "Location",
              "description": "Actual breakpoint location."
            }
          ],
          "description": "Fired when breakpoint is resolved to an actual script and location."
        },
        {
          "name": "paused",
          "parameters": [
            {
              "name": "callFrames",
              "type": "array",
              "items": {
                "$ref": "CallFrame"
              },
              "description": "Call stack the virtual machine stopped on."
            },
            {
              "name": "reason",
              "type": "string",
              "enum": [
                "XHR",
                "DOM",
                "EventListener",
                "exception",
                "assert",
                "CSPViolation",
                "DebuggerStatement",
                "Breakpoint",
                "PauseOnNextStatement",
                "other"
              ],
              "description": "Pause reason."
            },
            {
              "name": "data",
              "type": "object",
              "optional": true,
              "description": "Object containing break-specific auxiliary properties."
            }
          ],
          "description": "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."
        },
        {
          "name": "resumed",
          "description": "Fired when the virtual machine resumed execution."
        }
      ],
      "types": [
        {
          "id": "BreakpointId",
          "type": "string",
          "description": "Breakpoint identifier."
        },
        {
          "id": "CallFrameId",
          "type": "string",
          "description": "Call frame identifier."
        },
        {
          "id": "Location",
          "type": "object",
          "properties": [
            {
              "name": "scriptId",
              "$ref": "ScriptId",
              "description": "Script identifier as reported in the <code>Debugger.scriptParsed</code>."
            },
            {
              "name": "lineNumber",
              "type": "integer",
              "description": "Line number in the script."
            },
            {
              "name": "columnNumber",
              "type": "integer",
              "optional": true,
              "description": "Column number in the script."
            }
          ],
          "description": "Location in the source code."
        },
        {
          "id": "CallFrame",
          "type": "object",
          "properties": [
            {
              "name": "callFrameId",
              "$ref": "CallFrameId",
              "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused."
            },
            {
              "name": "functionName",
              "type": "string",
              "description": "Name of the JavaScript function called on this call frame."
            },
            {
              "name": "location",
              "$ref": "Location",
              "description": "Location in the source code."
            },
            {
              "name": "scopeChain",
              "type": "array",
              "items": {
                "$ref": "Scope"
              },
              "description": "Scope chain for this call frame."
            },
            {
              "name": "this",
              "$ref": "Runtime.RemoteObject",
              "description": "<code>this</code> object for this call frame."
            },
            {
              "name": "isTailDeleted",
              "type": "boolean",
              "description": "Is the current frame tail deleted from a tail call."
            }
          ],
          "description": "JavaScript call frame. Array of call frames form the call stack."
        },
        {
          "id": "Scope",
          "type": "object",
          "properties": [
            {
              "name": "object",
              "$ref": "Runtime.RemoteObject",
              "description": "Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties."
            },
            {
              "name": "type",
              "type": "string",
              "enum": [
                "global",
                "with",
                "closure",
                "catch",
                "functionName",
                "globalLexicalEnvironment",
                "nestedLexical"
              ],
              "description": "Scope type."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "Name associated with the scope."
            },
            {
              "name": "location",
              "$ref": "Location",
              "optional": true,
              "description": "Location if available of the scope definition."
            }
          ],
          "description": "Scope description."
        }
      ]
    },
    {
      "domain": "Console",
      "commands": [
        {
          "name": "enable",
          "description": "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."
        },
        {
          "name": "disable",
          "description": "Disables console domain, prevents further console messages from being reported to the client."
        },
        {
          "name": "clearMessages",
          "description": "Clears console messages collected in the browser."
        }
      ],
      "events": [
        {
          "name": "messageAdded",
          "parameters": [
            {
              "name": "message",
              "$ref": "ConsoleMessage",
              "description": "Console message that has been added."
            }
          ],
          "description": "Issued when new console message is added."
        }
      ],
      "types": [
        {
          "id": "ConsoleMessage",
          "type": "object",
          "description": "Console message.",
          "properties": [
            {
              "name": "source",
              "type": "string",
              "enum": [
                "xml",
                "javascript",
                "network",
                "console-api",
                "storage",
                "appcache",
                "rendering",
                "css",
                "security",
                "content-blocker",
                "other"
              ],
              "description": "Message source."
            },
            {
              "name": "level",
              "type": "string",
              "enum": [
                "log",
                "info",
                "warning",
                "error",
                "debug"
              ],
              "description": "Message severity."
            },
            {
              "name": "text",
              "type": "string",
              "description": "Message text."
            },
            {
              "name": "type",
              "type": "string",
              "optional": true,
              "enum": [
                "log",
                "dir",
                "dirxml",
                "table",
                "trace",
                "clear",
                "startGroup",
                "startGroupCollapsed",
                "endGroup",
                "assert",
                "timing",
                "profile",
                "profileEnd"
              ],
              "description": "Console message type."
            },
            {
              "name": "url",
              "type": "string",
              "optional": true,
              "description": "URL of the message origin."
            },
            {
              "name": "line",
              "type": "integer",
              "optional": true,
              "description": "Line number in the resource that generated this message."
            },
            {
              "name": "column",
              "type": "integer",
              "optional": true,
              "description": "Column number on the line in the resource that generated this message."
            },
            {
              "name": "repeatCount",
              "type": "integer",
              "optional": true,
              "description": "Repeat count for repeated messages."
            },
            {
              "name": "parameters",
              "type": "array",
              "items": {
                "$ref": "Runtime.RemoteObject"
              },
              "optional": true,
              "description": "Message parameters in case of the formatted message."
            },
            {
              "name": "stackTrace",
              "$ref": "StackTrace",
              "optional": true,
              "description": "JavaScript stack trace for assertions and error messages."
            },
            {
              "name": "networkRequestId",
              "$ref": "Network.RequestId",
              "optional": true,
              "description": "Identifier of the network request associated with this message."
            }
          ]
        }
      ]
    },
    {
      "domain": "Console",
      "commands": [
        {
          "name": "enable",
          "description": "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."
        },
        {
          "name": "disable",
          "description": "Disables console domain, prevents further console messages from being reported to the client."
        },
        {
          "name": "clearMessages",
          "description": "Clears console messages collected in the browser."
        }
      ],
      "events": [
        {
          "name": "messageAdded",
          "parameters": [
            {
              "name": "message",
              "$ref": "ConsoleMessage",
              "description": "Console message that has been added."
            }
          ],
          "description": "Issued when new console message is added."
        }
      ],
      "types": [
        {
          "id": "ConsoleMessage",
          "type": "object",
          "description": "Console message.",
          "properties": [
            {
              "name": "source",
              "type": "string",
              "enum": [
                "xml",
                "javascript",
                "network",
                "console-api",
                "storage",
                "appcache",
                "rendering",
                "css",
                "security",
                "content-blocker",
                "other"
              ],
              "description": "Message source."
            },
            {
              "name": "level",
              "type": "string",
              "enum": [
                "log",
                "info",
                "warning",
                "error",
                "debug"
              ],
              "description": "Message severity."
            },
            {
              "name": "text",
              "type": "string",
              "description": "Message text."
            },
            {
              "name": "type",
              "type": "string",
              "optional": true,
              "enum": [
                "log",
                "dir",
                "dirxml",
                "table",
                "trace",
                "clear",
                "startGroup",
                "startGroupCollapsed",
                "endGroup",
                "assert",
                "timing",
                "profile",
                "profileEnd"
              ],
              "description": "Console message type."
            },
            {
              "name": "url",
              "type": "string",
              "optional": true,
              "description": "URL of the message origin."
            },
            {
              "name": "line",
              "type": "integer",
              "optional": true,
              "description": "Line number in the resource that generated this message."
            },
            {
              "name": "column",
              "type": "integer",
              "optional": true,
              "description": "Column number on the line in the resource that generated this message."
            },
            {
              "name": "repeatCount",
              "type": "integer",
              "optional": true,
              "description": "Repeat count for repeated messages."
            },
            {
              "name": "parameters",
              "type": "array",
              "items": {
                "$ref": "Runtime.RemoteObject"
              },
              "optional": true,
              "description": "Message parameters in case of the formatted message."
            },
            {
              "name": "stackTrace",
              "$ref": "StackTrace",
              "optional": true,
              "description": "JavaScript stack trace for assertions and error messages."
            },
            {
              "name": "networkRequestId",
              "$ref": "Network.RequestId",
              "optional": true,
              "description": "Identifier of the network request associated with this message."
            }
          ]
        }
      ]
    },
    {
      "domain": "DOM",
      "commands": [
        {
          "name": "getDocument",
          "returns": [
            {
              "name": "root",
              "$ref": "Node",
              "description": "Resulting node."
            }
          ],
          "description": "Returns the root DOM node to the caller."
        },
        {
          "name": "requestChildNodes",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get children for."
            },
            {
              "name": "depth",
              "type": "integer",
              "optional": true,
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0."
            }
          ],
          "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth."
        },
        {
          "name": "querySelector",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to query upon."
            },
            {
              "name": "selector",
              "type": "string",
              "description": "Selector string."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Query selector result."
            }
          ],
          "description": "Executes <code>querySelector</code> on a given node."
        },
        {
          "name": "querySelectorAll",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to query upon."
            },
            {
              "name": "selector",
              "type": "string",
              "description": "Selector string."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Query selector result."
            }
          ],
          "description": "Executes <code>querySelectorAll</code> on a given node."
        },
        {
          "name": "setNodeName",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set name for."
            },
            {
              "name": "name",
              "type": "string",
              "description": "New node's name."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "New node's id."
            }
          ],
          "description": "Sets node name for a node with given id."
        },
        {
          "name": "setNodeValue",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set value for."
            },
            {
              "name": "value",
              "type": "string",
              "description": "New node's value."
            }
          ],
          "description": "Sets node value for a node with given id."
        },
        {
          "name": "removeNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to remove."
            }
          ],
          "description": "Removes node with given id."
        },
        {
          "name": "setAttributeValue",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to set attribute for."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Sets attribute for an element with given id."
        },
        {
          "name": "setAttributesAsText",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to set attributes for."
            },
            {
              "name": "text",
              "type": "string",
              "description": "Text with a number of attributes. Will parse this text using HTML parser."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully."
            }
          ],
          "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs."
        },
        {
          "name": "removeAttribute",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to remove attribute from."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Name of the attribute to remove."
            }
          ],
          "description": "Removes attribute with given name from an element with given id."
        },
        {
          "name": "getOuterHTML",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get markup for."
            }
          ],
          "returns": [
            {
              "name": "outerHTML",
              "type": "string",
              "description": "Outer HTML markup."
            }
          ],
          "description": "Returns node's HTML markup."
        },
        {
          "name": "setOuterHTML",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set markup for."
            },
            {
              "name": "outerHTML",
              "type": "string",
              "description": "Outer HTML markup to set."
            }
          ],
          "description": "Sets node HTML markup, returns new node id."
        },
        {
          "name": "performSearch",
          "parameters": [
            {
              "name": "query",
              "type": "string",
              "description": "Plain text or query selector or XPath search query."
            },
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "optional": true,
              "description": "Ids of nodes to use as starting points for the search."
            }
          ],
          "returns": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            },
            {
              "name": "resultCount",
              "type": "integer",
              "description": "Number of search results."
            }
          ],
          "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session."
        },
        {
          "name": "getSearchResults",
          "parameters": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            },
            {
              "name": "fromIndex",
              "type": "integer",
              "description": "Start index of the search result to be returned."
            },
            {
              "name": "toIndex",
              "type": "integer",
              "description": "End index of the search result to be returned."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the search result nodes."
            }
          ],
          "description": "Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier."
        },
        {
          "name": "discardSearchResults",
          "parameters": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            }
          ],
          "description": "Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search."
        },
        {
          "name": "requestNode",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "Runtime.RemoteObjectId",
              "description": "JavaScript object id to convert into node."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Node id for given object."
            }
          ],
          "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications."
        },
        {
          "name": "highlightRect",
          "parameters": [
            {
              "name": "x",
              "type": "integer",
              "description": "X coordinate"
            },
            {
              "name": "y",
              "type": "integer",
              "description": "Y coordinate"
            },
            {
              "name": "width",
              "type": "integer",
              "description": "Rectangle width"
            },
            {
              "name": "height",
              "type": "integer",
              "description": "Rectangle height"
            },
            {
              "name": "color",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The highlight fill color (default: transparent)."
            },
            {
              "name": "outlineColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The highlight outline color (default: transparent)."
            },
            {
              "name": "usePageCoordinates",
              "type": "boolean",
              "optional": true,
              "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)."
            }
          ],
          "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport."
        },
        {
          "name": "highlightQuad",
          "parameters": [
            {
              "name": "quad",
              "$ref": "Quad",
              "description": "Quad to highlight"
            },
            {
              "name": "color",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The highlight fill color (default: transparent)."
            },
            {
              "name": "outlineColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The highlight outline color (default: transparent)."
            },
            {
              "name": "usePageCoordinates",
              "type": "boolean",
              "optional": true,
              "description": "Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default)."
            }
          ],
          "description": "Highlights given quad. Coordinates are absolute with respect to the main frame viewport."
        },
        {
          "name": "highlightNode",
          "parameters": [
            {
              "name": "highlightConfig",
              "$ref": "HighlightConfig",
              "description": "A descriptor for the highlight appearance."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Identifier of the node to highlight."
            },
            {
              "name": "objectId",
              "$ref": "Runtime.RemoteObjectId",
              "optional": true,
              "description": "JavaScript object id of the node to be highlighted."
            }
          ],
          "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
        },
        {
          "name": "hideHighlight",
          "description": "Hides DOM node highlight."
        },
        {
          "name": "highlightFrame",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Identifier of the frame to highlight."
            },
            {
              "name": "contentColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The content box highlight fill color (default: transparent)."
            },
            {
              "name": "contentOutlineColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The content box highlight outline color (default: transparent)."
            }
          ],
          "description": "Highlights owner element of the frame with given id."
        },
        {
          "name": "pushNodeByPathToFrontend",
          "parameters": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to node in the proprietary format."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node for given path."
            }
          ],
          "description": "Requests that the node is sent to the caller given its path. // FIXME, use XPath"
        },
        {
          "name": "resolveNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to resolve."
            },
            {
              "name": "objectGroup",
              "type": "string",
              "optional": true,
              "description": "Symbolic group name that can be used to release multiple objects."
            }
          ],
          "returns": [
            {
              "name": "object",
              "$ref": "Runtime.RemoteObject",
              "description": "JavaScript object wrapper for given node."
            }
          ],
          "description": "Resolves JavaScript node object for given node id."
        },
        {
          "name": "getAttributes",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to retrieve attibutes for."
            }
          ],
          "returns": [
            {
              "name": "attributes",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An interleaved array of node attribute names and values."
            }
          ],
          "description": "Returns attributes for the specified node."
        },
        {
          "name": "moveTo",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to drop."
            },
            {
              "name": "targetNodeId",
              "$ref": "NodeId",
              "description": "Id of the element to drop into."
            },
            {
              "name": "insertBeforeNodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Drop node before given one."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "New id of the moved node."
            }
          ],
          "description": "Moves node into the new container, places it before the given anchor."
        },
        {
          "name": "undo",
          "description": "Undoes the last performed action."
        },
        {
          "name": "redo",
          "description": "Re-does the last undone action."
        },
        {
          "name": "markUndoableState",
          "description": "Marks last undoable state."
        },
        {
          "name": "focus",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to focus."
            }
          ],
          "description": "Focuses the given element."
        }
      ],
      "events": [
        {
          "name": "documentUpdated",
          "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
        },
        {
          "name": "setChildNodes",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Parent node id to populate with children."
            },
            {
              "name": "nodes",
              "type": "array",
              "items": {
                "$ref": "Node"
              },
              "description": "Child nodes array."
            }
          ],
          "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
        },
        {
          "name": "attributeModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Fired when <code>Element</code>'s attribute is modified."
        },
        {
          "name": "attributeRemoved",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "A ttribute name."
            }
          ],
          "description": "Fired when <code>Element</code>'s attribute is removed."
        },
        {
          "name": "inlineStyleInvalidated",
          "parameters": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the nodes for which the inline styles have been invalidated."
            }
          ],
          "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification."
        },
        {
          "name": "characterDataModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "characterData",
              "type": "string",
              "description": "New text value."
            }
          ],
          "description": "Mirrors <code>DOMCharacterDataModified</code> event."
        },
        {
          "name": "childNodeCountUpdated",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "childNodeCount",
              "type": "integer",
              "description": "New node count."
            }
          ],
          "description": "Fired when <code>Container</code>'s child node count has changed."
        },
        {
          "name": "childNodeInserted",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "previousNodeId",
              "$ref": "NodeId",
              "description": "If of the previous siblint."
            },
            {
              "name": "node",
              "$ref": "Node",
              "description": "Inserted node data."
            }
          ],
          "description": "Mirrors <code>DOMNodeInserted</code> event."
        },
        {
          "name": "childNodeRemoved",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Parent id."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has been removed."
            }
          ],
          "description": "Mirrors <code>DOMNodeRemoved</code> event."
        },
        {
          "name": "shadowRootPushed",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "root",
              "$ref": "Node",
              "description": "Shadow root."
            }
          ],
          "description": "Called when shadow root is pushed into the element."
        },
        {
          "name": "shadowRootPopped",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "rootId",
              "$ref": "NodeId",
              "description": "Shadow root id."
            }
          ],
          "description": "Called when shadow root is popped from the element."
        },
        {
          "name": "pseudoElementAdded",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Pseudo element's parent element id."
            },
            {
              "name": "pseudoElement",
              "$ref": "Node",
              "description": "The added pseudo element."
            }
          ],
          "description": "Called when a pseudo element is added to an element."
        },
        {
          "name": "pseudoElementRemoved",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Pseudo element's parent element id."
            },
            {
              "name": "pseudoElementId",
              "$ref": "NodeId",
              "description": "The removed pseudo element id."
            }
          ],
          "description": "Called when a pseudo element is removed from an element."
        }
      ],
      "types": [
        {
          "id": "NodeId",
          "type": "integer",
          "description": "Unique DOM node identifier."
        },
        {
          "id": "BackendNodeId",
          "type": "integer",
          "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the front-end."
        },
        {
          "id": "PseudoType",
          "type": "string",
          "enum": [
            "before",
            "after"
          ],
          "description": "Pseudo element type."
        },
        {
          "id": "ShadowRootType",
          "type": "string",
          "enum": [
            "user-agent",
            "open",
            "closed"
          ],
          "description": "Shadow root type."
        },
        {
          "id": "Node",
          "type": "object",
          "properties": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client."
            },
            {
              "name": "nodeType",
              "type": "integer",
              "description": "<code>Node</code>'s nodeType."
            },
            {
              "name": "nodeName",
              "type": "string",
              "description": "<code>Node</code>'s nodeName."
            },
            {
              "name": "localName",
              "type": "string",
              "description": "<code>Node</code>'s localName."
            },
            {
              "name": "nodeValue",
              "type": "string",
              "description": "<code>Node</code>'s nodeValue."
            },
            {
              "name": "childNodeCount",
              "type": "integer",
              "optional": true,
              "description": "Child count for <code>Container</code> nodes."
            },
            {
              "name": "children",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "Node"
              },
              "description": "Child nodes of this node when requested with children."
            },
            {
              "name": "attributes",
              "type": "array",
              "optional": true,
              "items": {
                "type": "string"
              },
              "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>."
            },
            {
              "name": "documentURL",
              "type": "string",
              "optional": true,
              "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to."
            },
            {
              "name": "baseURL",
              "type": "string",
              "optional": true,
              "description": "Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion."
            },
            {
              "name": "publicId",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType</code>'s publicId."
            },
            {
              "name": "systemId",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType</code>'s systemId."
            },
            {
              "name": "internalSubset",
              "type": "string",
              "optional": true,
              "description": "<code>DocumentType</code>'s internalSubset."
            },
            {
              "name": "xmlVersion",
              "type": "string",
              "optional": true,
              "description": "<code>Document</code>'s XML version in case of XML documents."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "<code>Attr</code>'s name."
            },
            {
              "name": "value",
              "type": "string",
              "optional": true,
              "description": "<code>Attr</code>'s value."
            },
            {
              "name": "pseudoType",
              "$ref": "PseudoType",
              "optional": true,
              "description": "Pseudo element type for this node."
            },
            {
              "name": "shadowRootType",
              "$ref": "ShadowRootType",
              "optional": true,
              "description": "Shadow root type."
            },
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "optional": true,
              "description": "Frame ID for frame owner elements."
            },
            {
              "name": "contentDocument",
              "$ref": "Node",
              "optional": true,
              "description": "Content document for frame owner elements."
            },
            {
              "name": "shadowRoots",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "Node"
              },
              "description": "Shadow root list for given element host."
            },
            {
              "name": "templateContent",
              "$ref": "Node",
              "optional": true,
              "description": "Content document fragment for template elements"
            },
            {
              "name": "pseudoElements",
              "type": "array",
              "items": {
                "$ref": "Node"
              },
              "optional": true,
              "description": "Pseudo elements associated with this node."
            },
            {
              "name": "role",
              "type": "string",
              "optional": true,
              "description": "Computed value for first recognized role token, default role per element, or overridden role."
            },
            {
              "name": "contentSecurityPolicyHash",
              "type": "string",
              "optional": true,
              "description": "Computed SHA-256 Content Security Policy hash source for given element."
            }
          ],
          "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
        },
        {
          "id": "Quad",
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 8,
          "maxItems": 8,
          "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise."
        },
        {
          "id": "HighlightConfig",
          "type": "object",
          "properties": [
            {
              "name": "showInfo",
              "type": "boolean",
              "optional": true,
              "description": "Whether the node info tooltip should be shown (default: false)."
            },
            {
              "name": "contentColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The content box highlight fill color (default: transparent)."
            },
            {
              "name": "paddingColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The padding highlight fill color (default: transparent)."
            },
            {
              "name": "borderColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The border highlight fill color (default: transparent)."
            },
            {
              "name": "marginColor",
              "$ref": "RGBAColor",
              "optional": true,
              "description": "The margin highlight fill color (default: transparent)."
            }
          ],
          "description": "Configuration data for the highlighting of page elements."
        }
      ]
    },
    {
      "domain": "DOMDebugger",
      "commands": [
        {
          "name": "setDOMBreakpoint",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId",
              "description": "Identifier of the node to set breakpoint on."
            },
            {
              "name": "type",
              "$ref": "DOMBreakpointType",
              "description": "Type of the operation to stop upon."
            }
          ],
          "description": "Sets breakpoint on particular operation with DOM."
        },
        {
          "name": "removeDOMBreakpoint",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId",
              "description": "Identifier of the node to remove breakpoint from."
            },
            {
              "name": "type",
              "$ref": "DOMBreakpointType",
              "description": "Type of the breakpoint to remove."
            }
          ],
          "description": "Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>."
        },
        {
          "name": "setEventListenerBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "DOM Event name to stop on (any DOM event will do)."
            }
          ],
          "description": "Sets breakpoint on particular DOM event."
        },
        {
          "name": "removeEventListenerBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Event name."
            }
          ],
          "description": "Removes breakpoint on particular DOM event."
        },
        {
          "name": "setInstrumentationBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Instrumentation name to stop on."
            }
          ],
          "description": "Sets breakpoint on particular native event."
        },
        {
          "name": "removeInstrumentationBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Instrumentation name to stop on."
            }
          ],
          "description": "Sets breakpoint on particular native event."
        },
        {
          "name": "setXHRBreakpoint",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL substring. All XHRs having this substring in the URL will get stopped upon."
            }
          ],
          "description": "Sets breakpoint on XMLHttpRequest."
        },
        {
          "name": "removeXHRBreakpoint",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL substring."
            }
          ],
          "description": "Removes breakpoint from XMLHttpRequest."
        }
      ],
      "events": [],
      "types": [
        {
          "id": "DOMBreakpointType",
          "type": "string",
          "enum": [
            "subtree-modified",
            "attribute-modified",
            "node-removed"
          ],
          "description": "DOM breakpoint type."
        }
      ]
    },
    {
      "domain": "Debugger",
      "commands": [
        {
          "name": "enable",
          "description": "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."
        },
        {
          "name": "disable",
          "description": "Disables debugger for given page."
        },
        {
          "name": "setBreakpointsActive",
          "parameters": [
            {
              "name": "active",
              "type": "boolean",
              "description": "New value for breakpoints active state."
            }
          ],
          "description": "Activates / deactivates all breakpoints on the page."
        },
        {
          "name": "setBreakpointByUrl",
          "parameters": [
            {
              "name": "lineNumber",
              "type": "integer",
              "description": "Line number to set breakpoint at."
            },
            {
              "name": "url",
              "type": "string",
              "optional": true,
              "description": "URL of the resources to set breakpoint on."
            },
            {
              "name": "urlRegex",
              "type": "string",
              "optional": true,
              "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified."
            },
            {
              "name": "columnNumber",
              "type": "integer",
              "optional": true,
              "description": "Offset in the line to set breakpoint at."
            },
            {
              "name": "options",
              "$ref": "BreakpointOptions",
              "optional": true,
              "description": "Options to apply to this breakpoint to modify its behavior."
            }
          ],
          "returns": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId",
              "description": "Id of the created breakpoint for further reference."
            },
            {
              "name": "locations",
              "type": "array",
              "items": {
                "$ref": "Location"
              },
              "description": "List of the locations this breakpoint resolved into upon addition."
            }
          ],
          "description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."
        },
        {
          "name": "setBreakpoint",
          "parameters": [
            {
              "name": "location",
              "$ref": "Location",
              "description": "Location to set breakpoint in."
            },
            {
              "name": "options",
              "$ref": "BreakpointOptions",
              "optional": true,
              "description": "Options to apply to this breakpoint to modify its behavior."
            }
          ],
          "returns": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId",
              "description": "Id of the created breakpoint for further reference."
            },
            {
              "name": "actualLocation",
              "$ref": "Location",
              "description": "Location this breakpoint resolved into."
            }
          ],
          "description": "Sets JavaScript breakpoint at a given location."
        },
        {
          "name": "removeBreakpoint",
          "parameters": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId"
            }
          ],
          "description": "Removes JavaScript breakpoint."
        },
        {
          "name": "continueToLocation",
          "parameters": [
            {
              "name": "location",
              "$ref": "Location",
              "description": "Location to continue to."
            }
          ],
          "description": "Continues execution until specific location is reached."
        },
        {
          "name": "stepOver",
          "description": "Steps over the statement."
        },
        {
          "name": "stepInto",
          "description": "Steps into the function call."
        },
        {
          "name": "stepOut",
          "description": "Steps out of the function call."
        },
        {
          "name": "pause",
          "description": "Stops on the next JavaScript statement."
        },
        {
          "name": "resume",
          "description": "Resumes JavaScript execution."
        },
        {
          "name": "searchInContent",
          "description": "Searches for given string in script content.",
          "parameters": [
            {
              "name": "scriptId",
              "$ref": "ScriptId",
              "description": "Id of the script to search in."
            },
            {
              "name": "query",
              "type": "string",
              "description": "String to search for."
            },
            {
              "name": "caseSensitive",
              "type": "boolean",
              "optional": true,
              "description": "If true, search is case sensitive."
            },
            {
              "name": "isRegex",
              "type": "boolean",
              "optional": true,
              "description": "If true, treats string parameter as regex."
            }
          ],
          "returns": [
            {
              "name": "result",
              "type": "array",
              "items": {
                "$ref": "GenericTypes.SearchMatch"
              },
              "description": "List of search matches."
            }
          ]
        },
        {
          "name": "getScriptSource",
          "parameters": [
            {
              "name": "scriptId",
              "$ref": "ScriptId",
              "description": "Id of the script to get source for."
            }
          ],
          "returns": [
            {
              "name": "scriptSource",
              "type": "string",
              "description": "Script source."
            }
          ],
          "description": "Returns source for the script with given id."
        },
        {
          "name": "setPauseOnExceptions",
          "parameters": [
            {
              "name": "state",
              "type": "string",
              "enum": [
                "none",
                "uncaught",
                "all"
              ],
              "description": "Pause on exceptions mode."
            }
          ],
          "description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."
        },
        {
          "name": "evaluateOnCallFrame",
          "parameters": [
            {
              "name": "callFrameId",
              "$ref": "CallFrameId",
              "description": "Call frame identifier to evaluate on."
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Expression to evaluate."
            },
            {
              "name": "objectGroup",
              "type": "string",
              "optional": true,
              "description": "String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>)."
            },
            {
              "name": "includeCommandLineAPI",
              "type": "boolean",
              "optional": true,
              "description": "Specifies whether command line API should be available to the evaluated expression, defaults to false."
            },
            {
              "name": "doNotPauseOnExceptionsAndMuteConsole",
              "type": "boolean",
              "optional": true,
              "description": "Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state."
            },
            {
              "name": "returnByValue",
              "type": "boolean",
              "optional": true,
              "description": "Whether the result is expected to be a JSON object that should be sent by value."
            },
            {
              "name": "generatePreview",
              "type": "boolean",
              "optional": true,
              "description": "Whether preview should be generated for the result."
            },
            {
              "name": "saveResult",
              "type": "boolean",
              "optional": true,
              "description": "Whether the resulting value should be considered for saving in the $n history."
            }
          ],
          "returns": [
            {
              "name": "result",
              "$ref": "Runtime.RemoteObject",
              "description": "Object wrapper for the evaluation result."
            },
            {
              "name": "wasThrown",
              "type": "boolean",
              "optional": true,
              "description": "True if the result was thrown during the evaluation."
            },
            {
              "name": "savedResultIndex",
              "type": "integer",
              "optional": true,
              "description": "If the result was saved, this is the $n index that can be used to access the value."
            }
          ],
          "description": "Evaluates expression on a given call frame."
        }
      ],
      "events": [
        {
          "name": "scriptParsed",
          "parameters": [
            {
              "name": "scriptId",
              "$ref": "ScriptId",
              "description": "Identifier of the script parsed."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL of the script parsed (if any)."
            },
            {
              "name": "startLine",
              "type": "integer",
              "description": "Line offset of the script within the resource with given URL (for script tags)."
            },
            {
              "name": "startColumn",
              "type": "integer",
              "description": "Column offset of the script within the resource with given URL."
            },
            {
              "name": "endLine",
              "type": "integer",
              "description": "Last line of the script."
            },
            {
              "name": "endColumn",
              "type": "integer",
              "description": "Length of the last line of the script."
            },
            {
              "name": "isContentScript",
              "type": "boolean",
              "optional": true,
              "description": "Determines whether this script is a user extension script."
            },
            {
              "name": "sourceURL",
              "type": "string",
              "optional": true,
              "description": "sourceURL name of the script (if any)."
            },
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with script (if any)."
            }
          ],
          "description": "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."
        },
        {
          "name": "scriptFailedToParse",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "URL of the script that failed to parse."
            },
            {
              "name": "scriptSource",
              "type": "string",
              "description": "Source text of the script that failed to parse."
            },
            {
              "name": "startLine",
              "type": "integer",
              "description": "Line offset of the script within the resource."
            },
            {
              "name": "errorLine",
              "type": "integer",
              "description": "Line with error."
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "Parse error message."
            }
          ],
          "description": "Fired when virtual machine fails to parse the script."
        },
        {
          "name": "breakpointResolved",
          "parameters": [
            {
              "name": "breakpointId",
              "$ref": "BreakpointId",
              "description": "Breakpoint unique identifier."
            },
            {
              "name": "location",
              "$ref": "Location",
              "description": "Actual breakpoint location."
            }
          ],
          "description": "Fired when breakpoint is resolved to an actual script and location."
        },
        {
          "name": "paused",
          "parameters": [
            {
              "name": "callFrames",
              "type": "array",
              "items": {
                "$ref": "CallFrame"
              },
              "description": "Call stack the virtual machine stopped on."
            },
            {
              "name": "reason",
              "type": "string",
              "enum": [
                "XHR",
                "DOM",
                "EventListener",
                "exception",
                "assert",
                "CSPViolation",
                "DebuggerStatement",
                "Breakpoint",
                "PauseOnNextStatement",
                "other"
              ],
              "description": "Pause reason."
            },
            {
              "name": "data",
              "type": "object",
              "optional": true,
              "description": "Object containing break-specific auxiliary properties."
            }
          ],
          "description": "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."
        },
        {
          "name": "resumed",
          "description": "Fired when the virtual machine resumed execution."
        }
      ],
      "types": [
        {
          "id": "BreakpointId",
          "type": "string",
          "description": "Breakpoint identifier."
        },
        {
          "id": "CallFrameId",
          "type": "string",
          "description": "Call frame identifier."
        },
        {
          "id": "Location",
          "type": "object",
          "properties": [
            {
              "name": "scriptId",
              "$ref": "ScriptId",
              "description": "Script identifier as reported in the <code>Debugger.scriptParsed</code>."
            },
            {
              "name": "lineNumber",
              "type": "integer",
              "description": "Line number in the script."
            },
            {
              "name": "columnNumber",
              "type": "integer",
              "optional": true,
              "description": "Column number in the script."
            }
          ],
          "description": "Location in the source code."
        },
        {
          "id": "CallFrame",
          "type": "object",
          "properties": [
            {
              "name": "callFrameId",
              "$ref": "CallFrameId",
              "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused."
            },
            {
              "name": "functionName",
              "type": "string",
              "description": "Name of the JavaScript function called on this call frame."
            },
            {
              "name": "location",
              "$ref": "Location",
              "description": "Location in the source code."
            },
            {
              "name": "scopeChain",
              "type": "array",
              "items": {
                "$ref": "Scope"
              },
              "description": "Scope chain for this call frame."
            },
            {
              "name": "this",
              "$ref": "Runtime.RemoteObject",
              "description": "<code>this</code> object for this call frame."
            },
            {
              "name": "isTailDeleted",
              "type": "boolean",
              "description": "Is the current frame tail deleted from a tail call."
            }
          ],
          "description": "JavaScript call frame. Array of call frames form the call stack."
        },
        {
          "id": "Scope",
          "type": "object",
          "properties": [
            {
              "name": "object",
              "$ref": "Runtime.RemoteObject",
              "description": "Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties."
            },
            {
              "name": "type",
              "type": "string",
              "enum": [
                "global",
                "with",
                "closure",
                "catch",
                "functionName",
                "globalLexicalEnvironment",
                "nestedLexical"
              ],
              "description": "Scope type."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "Name associated with the scope."
            },
            {
              "name": "location",
              "$ref": "Location",
              "optional": true,
              "description": "Location if available of the scope definition."
            }
          ],
          "description": "Scope description."
        }
      ]
    },
    {
      "domain": "Network",
      "commands": [
        {
          "name": "enable",
          "description": "Enables network tracking, network events will now be delivered to the client."
        },
        {
          "name": "disable",
          "description": "Disables network tracking, prevents network events from being sent to the client."
        },
        {
          "name": "setExtraHTTPHeaders",
          "description": "Specifies whether to always send extra HTTP headers with the requests from this page.",
          "parameters": [
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "Map with extra HTTP headers."
            }
          ]
        },
        {
          "name": "getResponseBody",
          "description": "Returns content served for the given request.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Identifier of the network request to get content for."
            }
          ],
          "returns": [
            {
              "name": "body",
              "type": "string",
              "description": "Response body."
            },
            {
              "name": "base64Encoded",
              "type": "boolean",
              "description": "True, if content was sent as base64."
            }
          ]
        },
        {
          "name": "setCacheDisabled",
          "parameters": [
            {
              "name": "cacheDisabled",
              "type": "boolean",
              "description": "Cache disabled state."
            }
          ],
          "description": "Toggles ignoring cache for each request. If <code>true</code>, cache will not be used."
        }
      ],
      "events": [
        {
          "name": "requestWillBeSent",
          "description": "Fired when page is about to send HTTP request.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Frame identifier."
            },
            {
              "name": "loaderId",
              "$ref": "LoaderId",
              "description": "Loader identifier."
            },
            {
              "name": "documentURL",
              "type": "string",
              "description": "URL of the document this request is loaded for."
            },
            {
              "name": "request",
              "$ref": "Request",
              "description": "Request data."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "initiator",
              "$ref": "Initiator",
              "description": "Request initiator."
            },
            {
              "name": "redirectResponse",
              "optional": true,
              "$ref": "Response",
              "description": "Redirect response data."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "optional": true,
              "description": "Resource type."
            }
          ]
        },
        {
          "name": "requestServedFromCache",
          "description": "Fired if request ended up loading from cache.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            }
          ]
        },
        {
          "name": "responseReceived",
          "description": "Fired when HTTP response is available.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Frame identifier."
            },
            {
              "name": "loaderId",
              "$ref": "LoaderId",
              "description": "Loader identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "description": "Resource type."
            },
            {
              "name": "response",
              "$ref": "Response",
              "description": "Response data."
            }
          ]
        },
        {
          "name": "dataReceived",
          "description": "Fired when data chunk was received over the network.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "dataLength",
              "type": "integer",
              "description": "Data chunk length."
            },
            {
              "name": "encodedDataLength",
              "type": "integer",
              "description": "Actual bytes received (might be less than dataLength for compressed encodings)."
            }
          ]
        },
        {
          "name": "loadingFinished",
          "description": "Fired when HTTP request has finished loading.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with this resource (if any)."
            }
          ]
        },
        {
          "name": "loadingFailed",
          "description": "Fired when HTTP request has failed to load.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "errorText",
              "type": "string",
              "description": "User friendly error message."
            },
            {
              "name": "canceled",
              "type": "boolean",
              "optional": true,
              "description": "True if loading was canceled."
            }
          ]
        },
        {
          "name": "webSocketWillSendHandshakeRequest",
          "description": "Fired when WebSocket is about to initiate handshake.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "request",
              "$ref": "WebSocketRequest",
              "description": "WebSocket request data."
            }
          ]
        },
        {
          "name": "webSocketHandshakeResponseReceived",
          "description": "Fired when WebSocket handshake response becomes available.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketResponse",
              "description": "WebSocket response data."
            }
          ]
        },
        {
          "name": "webSocketCreated",
          "description": "Fired upon WebSocket creation.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "url",
              "type": "string",
              "description": "WebSocket request URL."
            }
          ]
        },
        {
          "name": "webSocketClosed",
          "description": "Fired when WebSocket is closed.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            }
          ]
        },
        {
          "name": "webSocketFrameReceived",
          "description": "Fired when WebSocket frame is received.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketFrame",
              "description": "WebSocket response data."
            }
          ]
        },
        {
          "name": "webSocketFrameError",
          "description": "Fired when WebSocket frame error occurs.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "WebSocket frame error message."
            }
          ]
        },
        {
          "name": "webSocketFrameSent",
          "description": "Fired when WebSocket frame is sent.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketFrame",
              "description": "WebSocket response data."
            }
          ]
        }
      ],
      "types": [
        {
          "id": "LoaderId",
          "type": "string",
          "description": "Unique loader identifier."
        },
        {
          "id": "RequestId",
          "type": "string",
          "description": "Unique request identifier."
        },
        {
          "id": "Timestamp",
          "type": "number",
          "description": "Number of seconds since epoch."
        },
        {
          "id": "Headers",
          "type": "object",
          "description": "Request / response headers as keys / values of JSON object."
        },
        {
          "id": "ResourceTiming",
          "type": "object",
          "description": "Timing information for the request.",
          "properties": [
            {
              "name": "navigationStart",
              "type": "number",
              "description": "Timing's navigationStart is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this navigationStart."
            },
            {
              "name": "domainLookupStart",
              "type": "number",
              "description": "Started DNS address resolve."
            },
            {
              "name": "domainLookupEnd",
              "type": "number",
              "description": "Finished DNS address resolve."
            },
            {
              "name": "connectStart",
              "type": "number",
              "description": "Started connecting to the remote host."
            },
            {
              "name": "connectEnd",
              "type": "number",
              "description": "Connected to the remote host."
            },
            {
              "name": "secureConnectionStart",
              "type": "number",
              "description": "Started SSL handshake."
            },
            {
              "name": "requestStart",
              "type": "number",
              "description": "Started sending request."
            },
            {
              "name": "responseStart",
              "type": "number",
              "description": "Started receiving response headers."
            }
          ]
        },
        {
          "id": "Request",
          "type": "object",
          "description": "HTTP request data.",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "description": "Request URL."
            },
            {
              "name": "method",
              "type": "string",
              "description": "HTTP request method."
            },
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "HTTP request headers."
            },
            {
              "name": "postData",
              "type": "string",
              "optional": true,
              "description": "HTTP POST request data."
            }
          ]
        },
        {
          "id": "Response",
          "type": "object",
          "description": "HTTP response data.",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "description": "Response URL. This URL can be different from CachedResource.url in case of redirect."
            },
            {
              "name": "status",
              "type": "number",
              "description": "HTTP response status code."
            },
            {
              "name": "statusText",
              "type": "string",
              "description": "HTTP response status text."
            },
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "HTTP response headers."
            },
            {
              "name": "headersText",
              "type": "string",
              "optional": true,
              "description": "HTTP response headers text."
            },
            {
              "name": "mimeType",
              "type": "string",
              "description": "Resource mimeType as determined by the browser."
            },
            {
              "name": "requestHeaders",
              "$ref": "Headers",
              "optional": true,
              "description": "Refined HTTP request headers that were actually transmitted over the network."
            },
            {
              "name": "requestHeadersText",
              "type": "string",
              "optional": true,
              "description": "HTTP request headers text."
            },
            {
              "name": "fromDiskCache",
              "type": "boolean",
              "optional": true,
              "description": "Specifies that the request was served from the disk cache."
            },
            {
              "name": "timing",
              "$ref": "ResourceTiming",
              "optional": true,
              "description": "Timing information for the given request."
            }
          ]
        },
        {
          "id": "WebSocketRequest",
          "type": "object",
          "description": "WebSocket request data.",
          "properties": [
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "HTTP response headers."
            }
          ]
        },
        {
          "id": "WebSocketResponse",
          "type": "object",
          "description": "WebSocket response data.",
          "properties": [
            {
              "name": "status",
              "type": "number",
              "description": "HTTP response status code."
            },
            {
              "name": "statusText",
              "type": "string",
              "description": "HTTP response status text."
            },
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "HTTP response headers."
            }
          ]
        },
        {
          "id": "WebSocketFrame",
          "type": "object",
          "description": "WebSocket frame data.",
          "properties": [
            {
              "name": "opcode",
              "type": "number",
              "description": "WebSocket frame opcode."
            },
            {
              "name": "mask",
              "type": "boolean",
              "description": "WebSocket frame mask."
            },
            {
              "name": "payloadData",
              "type": "string",
              "description": "WebSocket frame payload data."
            }
          ]
        },
        {
          "id": "CachedResource",
          "type": "object",
          "description": "Information about the cached resource.",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL. This is the url of the original network request."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "description": "Type of this resource."
            },
            {
              "name": "response",
              "$ref": "Response",
              "optional": true,
              "description": "Cached response data."
            },
            {
              "name": "bodySize",
              "type": "number",
              "description": "Cached response body size."
            },
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with this resource (if any)."
            }
          ]
        },
        {
          "id": "Initiator",
          "type": "object",
          "description": "Information about the request initiator.",
          "properties": [
            {
              "name": "type",
              "type": "string",
              "enum": [
                "parser",
                "script",
                "other"
              ],
              "description": "Type of this initiator."
            },
            {
              "name": "stackTrace",
              "$ref": "Console.StackTrace",
              "optional": true,
              "description": "Initiator JavaScript stack trace, set for Script only."
            },
            {
              "name": "url",
              "type": "string",
              "optional": true,
              "description": "Initiator URL, set for Parser type only."
            },
            {
              "name": "lineNumber",
              "type": "number",
              "optional": true,
              "description": "Initiator line number, set for Parser type only."
            }
          ]
        }
      ]
    },
    {
      "domain": "Page",
      "commands": [
        {
          "name": "enable",
          "description": "Enables page domain notifications."
        },
        {
          "name": "disable",
          "description": "Disables page domain notifications."
        },
        {
          "name": "addScriptToEvaluateOnLoad",
          "parameters": [
            {
              "name": "scriptSource",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "identifier",
              "$ref": "ScriptIdentifier",
              "description": "Identifier of the added script."
            }
          ]
        },
        {
          "name": "removeScriptToEvaluateOnLoad",
          "parameters": [
            {
              "name": "identifier",
              "$ref": "ScriptIdentifier"
            }
          ]
        },
        {
          "name": "reload",
          "parameters": [
            {
              "name": "ignoreCache",
              "type": "boolean",
              "optional": true,
              "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh)."
            },
            {
              "name": "scriptToEvaluateOnLoad",
              "type": "string",
              "optional": true,
              "description": "If set, the script will be injected into all frames of the inspected page after reload."
            }
          ],
          "description": "Reloads given page optionally ignoring the cache."
        },
        {
          "name": "navigate",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to navigate the page to."
            }
          ],
          "description": "Navigates current page to the given URL."
        },
        {
          "name": "getCookies",
          "returns": [
            {
              "name": "cookies",
              "type": "array",
              "items": {
                "$ref": "Cookie"
              },
              "description": "Array of cookie objects."
            }
          ],
          "description": "Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field."
        },
        {
          "name": "deleteCookie",
          "parameters": [
            {
              "name": "cookieName",
              "type": "string",
              "description": "Name of the cookie to remove."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL to match cooke domain and path."
            }
          ],
          "description": "Deletes browser cookie with given name, domain and path."
        },
        {
          "name": "getResourceTree",
          "description": "Returns present frame / resource tree structure.",
          "returns": [
            {
              "name": "frameTree",
              "$ref": "FrameResourceTree",
              "description": "Present frame / resource tree structure."
            }
          ]
        },
        {
          "name": "getResourceContent",
          "description": "Returns content of the given resource.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Frame id to get resource for."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL of the resource to get content for."
            }
          ],
          "returns": [
            {
              "name": "content",
              "type": "string",
              "description": "Resource content."
            },
            {
              "name": "base64Encoded",
              "type": "boolean",
              "description": "True, if content was served as base64."
            }
          ]
        },
        {
          "name": "searchInResource",
          "description": "Searches for given string in resource content.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Frame id for resource to search in."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL of the resource to search in."
            },
            {
              "name": "query",
              "type": "string",
              "description": "String to search for."
            },
            {
              "name": "caseSensitive",
              "type": "boolean",
              "optional": true,
              "description": "If true, search is case sensitive."
            },
            {
              "name": "isRegex",
              "type": "boolean",
              "optional": true,
              "description": "If true, treats string parameter as regex."
            },
            {
              "name": "requestId",
              "$ref": "Network.RequestId",
              "optional": true,
              "description": "Request id for resource to search in."
            }
          ],
          "returns": [
            {
              "name": "result",
              "type": "array",
              "items": {
                "$ref": "GenericTypes.SearchMatch"
              },
              "description": "List of search matches."
            }
          ]
        },
        {
          "name": "setDocumentContent",
          "description": "Sets given markup as the document's HTML.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Frame id to set HTML for."
            },
            {
              "name": "html",
              "type": "string",
              "description": "HTML content to set."
            }
          ]
        },
        {
          "name": "setTouchEmulationEnabled",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "description": "Whether the touch event emulation should be enabled."
            }
          ],
          "description": "Toggles mouse event-based touch event emulation."
        },
        {
          "name": "handleJavaScriptDialog",
          "description": "Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).",
          "parameters": [
            {
              "name": "accept",
              "type": "boolean",
              "description": "Whether to accept or dismiss the dialog."
            },
            {
              "name": "promptText",
              "type": "string",
              "optional": true,
              "description": "The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog."
            }
          ]
        }
      ],
      "events": [
        {
          "name": "domContentEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        },
        {
          "name": "loadEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        },
        {
          "name": "frameNavigated",
          "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
          "parameters": [
            {
              "name": "frame",
              "$ref": "Frame",
              "description": "Frame object."
            }
          ]
        },
        {
          "name": "frameDetached",
          "description": "Fired when frame has been detached from its parent.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has been detached."
            }
          ]
        },
        {
          "name": "frameStartedLoading",
          "description": "Fired when frame has started loading.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has started loading."
            }
          ]
        },
        {
          "name": "frameStoppedLoading",
          "description": "Fired when frame has stopped loading.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has stopped loading."
            }
          ]
        },
        {
          "name": "frameScheduledNavigation",
          "description": "Fired when frame schedules a potential navigation.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has scheduled a navigation."
            },
            {
              "name": "delay",
              "type": "number",
              "description": "Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start."
            }
          ]
        },
        {
          "name": "frameClearedScheduledNavigation",
          "description": "Fired when frame no longer has a scheduled navigation.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the frame that has cleared its scheduled navigation."
            }
          ]
        },
        {
          "name": "javascriptDialogOpening",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.",
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "description": "Message that will be displayed by the dialog."
            }
          ]
        },
        {
          "name": "javascriptDialogClosed",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed."
        }
      ],
      "types": [
        {
          "id": "ResourceType",
          "type": "string",
          "enum": [
            "Document",
            "Stylesheet",
            "Image",
            "Font",
            "Script",
            "XHR",
            "WebSocket",
            "Other"
          ],
          "description": "Resource type as it was perceived by the rendering engine."
        },
        {
          "id": "Frame",
          "type": "object",
          "description": "Information about the Frame on the page.",
          "properties": [
            {
              "name": "id",
              "type": "string",
              "description": "Frame unique identifier."
            },
            {
              "name": "parentId",
              "type": "string",
              "optional": true,
              "description": "Parent frame identifier."
            },
            {
              "name": "loaderId",
              "$ref": "Network.LoaderId",
              "description": "Identifier of the loader associated with this frame."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "Frame's name as specified in the tag."
            },
            {
              "name": "url",
              "type": "string",
              "description": "Frame document's URL."
            },
            {
              "name": "securityOrigin",
              "type": "string",
              "description": "Frame document's security origin."
            },
            {
              "name": "mimeType",
              "type": "string",
              "description": "Frame document's mimeType as determined by the browser."
            }
          ]
        },
        {
          "id": "FrameResource",
          "type": "object",
          "properties": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL."
            },
            {
              "name": "type",
              "$ref": "ResourceType",
              "description": "Type of this resource."
            },
            {
              "name": "mimeType",
              "type": "string",
              "description": "Resource mimeType as determined by the browser."
            },
            {
              "name": "failed",
              "type": "boolean",
              "optional": true,
              "description": "True if the resource failed to load."
            },
            {
              "name": "canceled",
              "type": "boolean",
              "optional": true,
              "description": "True if the resource was canceled during loading."
            },
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with this resource (if any)."
            }
          ]
        },
        {
          "id": "FrameResourceTree",
          "type": "object",
          "description": "Information about the Frame hierarchy along with their cached resources.",
          "properties": [
            {
              "name": "frame",
              "$ref": "Frame",
              "description": "Frame information for this tree item."
            },
            {
              "name": "childFrames",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "FrameResourceTree"
              },
              "description": "Child frames."
            },
            {
              "name": "resources",
              "type": "array",
              "items": {
                "$ref": "FrameResource"
              },
              "description": "Information about frame resources."
            }
          ]
        },
        {
          "id": "ScriptIdentifier",
          "type": "string",
          "description": "Unique script identifier."
        }
      ]
    },
    {
      "domain": "Runtime",
      "commands": [
        {
          "name": "evaluate",
          "parameters": [
            {
              "name": "expression",
              "type": "string",
              "description": "Expression to evaluate."
            },
            {
              "name": "objectGroup",
              "type": "string",
              "optional": true,
              "description": "Symbolic group name that can be used to release multiple objects."
            },
            {
              "name": "includeCommandLineAPI",
              "type": "boolean",
              "optional": true,
              "description": "Determines whether Command Line API should be available during the evaluation."
            },
            {
              "name": "doNotPauseOnExceptionsAndMuteConsole",
              "type": "boolean",
              "optional": true,
              "description": "Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state."
            },
            {
              "name": "contextId",
              "$ref": "Runtime.ExecutionContextId",
              "optional": true,
              "description": "Specifies in which isolated context to perform evaluation. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page."
            },
            {
              "name": "returnByValue",
              "type": "boolean",
              "optional": true,
              "description": "Whether the result is expected to be a JSON object that should be sent by value."
            },
            {
              "name": "generatePreview",
              "type": "boolean",
              "optional": true,
              "description": "Whether preview should be generated for the result."
            },
            {
              "name": "saveResult",
              "type": "boolean",
              "optional": true,
              "description": "Whether the resulting value should be considered for saving in the $n history."
            }
          ],
          "returns": [
            {
              "name": "result",
              "$ref": "RemoteObject",
              "description": "Evaluation result."
            },
            {
              "name": "wasThrown",
              "type": "boolean",
              "optional": true,
              "description": "True if the result was thrown during the evaluation."
            },
            {
              "name": "savedResultIndex",
              "type": "integer",
              "optional": true,
              "description": "If the result was saved, this is the $n index that can be used to access the value."
            }
          ],
          "description": "Evaluates expression on global object."
        },
        {
          "name": "callFunctionOn",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to call function on."
            },
            {
              "name": "functionDeclaration",
              "type": "string",
              "description": "Declaration of the function to call."
            },
            {
              "name": "arguments",
              "type": "array",
              "items": {
                "$ref": "CallArgument",
                "description": "Call argument."
              },
              "optional": true,
              "description": "Call arguments. All call arguments must belong to the same JavaScript world as the target object."
            },
            {
              "name": "doNotPauseOnExceptionsAndMuteConsole",
              "type": "boolean",
              "optional": true,
              "description": "Specifies whether function call should stop on exceptions and mute console. Overrides setPauseOnException state."
            },
            {
              "name": "returnByValue",
              "type": "boolean",
              "optional": true,
              "description": "Whether the result is expected to be a JSON object which should be sent by value."
            },
            {
              "name": "generatePreview",
              "type": "boolean",
              "optional": true,
              "description": "Whether preview should be generated for the result."
            }
          ],
          "returns": [
            {
              "name": "result",
              "$ref": "RemoteObject",
              "description": "Call result."
            },
            {
              "name": "wasThrown",
              "type": "boolean",
              "optional": true,
              "description": "True if the result was thrown during the evaluation."
            }
          ],
          "description": "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."
        },
        {
          "name": "getProperties",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to return properties for."
            },
            {
              "name": "ownProperties",
              "optional": true,
              "type": "boolean",
              "description": "If true, returns properties belonging only to the object itself, not to its prototype chain."
            },
            {
              "name": "generatePreview",
              "type": "boolean",
              "optional": true,
              "description": "Whether preview should be generated for property values."
            }
          ],
          "returns": [
            {
              "name": "result",
              "type": "array",
              "items": {
                "$ref": "PropertyDescriptor"
              },
              "description": "Object properties."
            },
            {
              "name": "internalProperties",
              "optional": true,
              "type": "array",
              "items": {
                "$ref": "InternalPropertyDescriptor"
              },
              "description": "Internal object properties."
            }
          ],
          "description": "Returns properties of a given object. Object group of the result is inherited from the target object."
        },
        {
          "name": "releaseObject",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "description": "Identifier of the object to release."
            }
          ],
          "description": "Releases remote object with given id."
        },
        {
          "name": "releaseObjectGroup",
          "parameters": [
            {
              "name": "objectGroup",
              "type": "string",
              "description": "Symbolic object group name."
            }
          ],
          "description": "Releases all remote objects that belong to a given group."
        },
        {
          "name": "enable",
          "description": "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."
        },
        {
          "name": "disable",
          "description": "Disables reporting of execution contexts creation."
        }
      ],
      "events": [
        {
          "name": "executionContextCreated",
          "parameters": [
            {
              "name": "context",
              "$ref": "ExecutionContextDescription",
              "description": "A newly created execution contex."
            }
          ],
          "description": "Issued when new execution context is created."
        }
      ],
      "types": [
        {
          "id": "RemoteObjectId",
          "type": "string",
          "description": "Unique object identifier."
        },
        {
          "id": "RemoteObject",
          "type": "object",
          "description": "Mirror object referencing original JavaScript object.",
          "properties": [
            {
              "name": "type",
              "type": "string",
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol"
              ],
              "description": "Object type."
            },
            {
              "name": "subtype",
              "type": "string",
              "optional": true,
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "error",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "class"
              ],
              "description": "Object subtype hint. Specified for <code>object</code> <code>function</code> (for class) type values only."
            },
            {
              "name": "className",
              "type": "string",
              "optional": true,
              "description": "Object class (constructor) name. Specified for <code>object</code> type values only."
            },
            {
              "name": "value",
              "type": "any",
              "optional": true,
              "description": "Remote object value (in case of primitive values or JSON values if it was requested)."
            },
            {
              "name": "description",
              "type": "string",
              "optional": true,
              "description": "String representation of the object."
            },
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "optional": true,
              "description": "Unique object identifier (for non-primitive values)."
            },
            {
              "name": "size",
              "type": "integer",
              "optional": true,
              "description": "Size of the array/collection. Specified for array/map/set/weakmap/weakset object type values only."
            },
            {
              "name": "classPrototype",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "Remote object for the class prototype. Specified for class object type values only."
            },
            {
              "name": "preview",
              "$ref": "ObjectPreview",
              "optional": true,
              "description": "Preview containing abbreviated property values. Specified for <code>object</code> type values only."
            }
          ]
        },
        {
          "id": "ObjectPreview",
          "type": "object",
          "description": "Object containing abbreviated remote object value.",
          "properties": [
            {
              "name": "type",
              "type": "string",
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol"
              ],
              "description": "Object type."
            },
            {
              "name": "subtype",
              "type": "string",
              "optional": true,
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "error",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "class"
              ],
              "description": "Object subtype hint. Specified for <code>object</code> type values only."
            },
            {
              "name": "description",
              "type": "string",
              "optional": true,
              "description": "String representation of the object."
            },
            {
              "name": "lossless",
              "type": "boolean",
              "description": "Determines whether preview is lossless (contains all information of the original object)."
            },
            {
              "name": "overflow",
              "type": "boolean",
              "optional": true,
              "description": "True iff some of the properties of the original did not fit."
            },
            {
              "name": "properties",
              "type": "array",
              "items": {
                "$ref": "PropertyPreview"
              },
              "optional": true,
              "description": "List of the properties."
            },
            {
              "name": "entries",
              "type": "array",
              "items": {
                "$ref": "EntryPreview"
              },
              "optional": true,
              "description": "List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only."
            },
            {
              "name": "size",
              "type": "integer",
              "optional": true,
              "description": "Size of the array/collection. Specified for array/map/set/weakmap/weakset object type values only."
            }
          ]
        },
        {
          "id": "PropertyPreview",
          "type": "object",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "type",
              "type": "string",
              "enum": [
                "object",
                "function",
                "undefined",
                "string",
                "number",
                "boolean",
                "symbol",
                "accessor"
              ],
              "description": "Object type."
            },
            {
              "name": "subtype",
              "type": "string",
              "optional": true,
              "enum": [
                "array",
                "null",
                "node",
                "regexp",
                "date",
                "error",
                "map",
                "set",
                "weakmap",
                "weakset",
                "iterator",
                "class"
              ],
              "description": "Object subtype hint. Specified for <code>object</code> type values only."
            },
            {
              "name": "value",
              "type": "string",
              "optional": true,
              "description": "User-friendly property value string."
            },
            {
              "name": "valuePreview",
              "$ref": "ObjectPreview",
              "optional": true,
              "description": "Nested value preview."
            },
            {
              "name": "internal",
              "type": "boolean",
              "optional": true,
              "description": "True if this is an internal property."
            }
          ]
        },
        {
          "id": "EntryPreview",
          "type": "object",
          "properties": [
            {
              "name": "key",
              "$ref": "ObjectPreview",
              "optional": true,
              "description": "Entry key. Specified for map-like collection entries."
            },
            {
              "name": "value",
              "$ref": "ObjectPreview",
              "description": "Entry value."
            }
          ]
        },
        {
          "id": "PropertyDescriptor",
          "type": "object",
          "description": "Object property descriptor.",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "description": "Property name or symbol description."
            },
            {
              "name": "value",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "The value associated with the property."
            },
            {
              "name": "writable",
              "type": "boolean",
              "optional": true,
              "description": "True if the value associated with the property may be changed (data descriptors only)."
            },
            {
              "name": "get",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only)."
            },
            {
              "name": "set",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only)."
            },
            {
              "name": "configurable",
              "type": "boolean",
              "description": "True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object."
            },
            {
              "name": "enumerable",
              "type": "boolean",
              "description": "True if this property shows up during enumeration of the properties on the corresponding object."
            },
            {
              "name": "wasThrown",
              "type": "boolean",
              "optional": true,
              "description": "True if the result was thrown during the evaluation."
            },
            {
              "name": "isOwn",
              "optional": true,
              "type": "boolean",
              "description": "True if the property is owned for the object."
            },
            {
              "name": "symbol",
              "optional": true,
              "$ref": "Runtime.RemoteObject",
              "description": "Property symbol object, if the property is a symbol."
            },
            {
              "name": "nativeGetter",
              "optional": true,
              "type": "boolean",
              "description": "True if the property value came from a native getter."
            }
          ]
        },
        {
          "id": "InternalPropertyDescriptor",
          "type": "object",
          "description": "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
          "properties": [
            {
              "name": "name",
              "type": "string",
              "description": "Conventional property name."
            },
            {
              "name": "value",
              "$ref": "RemoteObject",
              "optional": true,
              "description": "The value associated with the property."
            }
          ]
        },
        {
          "id": "CallArgument",
          "type": "object",
          "description": "Represents function call argument. Either remote object id <code>objectId</code> or primitive <code>value</code> or neither of (for undefined) them should be specified.",
          "properties": [
            {
              "name": "value",
              "type": "any",
              "optional": true,
              "description": "Primitive value."
            },
            {
              "name": "objectId",
              "$ref": "RemoteObjectId",
              "optional": true,
              "description": "Remote object handle."
            }
          ]
        },
        {
          "id": "ExecutionContextId",
          "type": "integer",
          "description": "Id of an execution context."
        },
        {
          "id": "ExecutionContextDescription",
          "type": "object",
          "description": "Description of an isolated world.",
          "properties": [
            {
              "name": "id",
              "$ref": "ExecutionContextId",
              "description": "Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed."
            },
            {
              "name": "isPageContext",
              "type": "boolean",
              "description": "True if this is a context where inpspected web page scripts run. False if it is a content script isolated context."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Human readable name describing given context."
            },
            {
              "name": "frameId",
              "$ref": "Network.FrameId",
              "description": "Id of the owning frame."
            }
          ]
        }
      ]
    }
  ]
}